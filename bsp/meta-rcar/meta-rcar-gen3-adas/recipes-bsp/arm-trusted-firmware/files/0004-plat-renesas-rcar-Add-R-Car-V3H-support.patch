From c6aa3761da4ae7654570b2693bed6c8b0363bc8f Mon Sep 17 00:00:00 2001
From: Valentine Barshak <valentine.barshak@cogentembedded.com>
Date: Tue, 19 Jan 2021 23:57:49 +0300
Subject: [PATCH 4/4] plat: renesas: rcar: Add R-Car V3H support

Add R-Car V3H support. This is based on the original V3H
support patch for Yocto v2.23.1 by Vladimir Barinov.
The BL2 image has been moved to SRAM to make it consistent
with other boards. This also should workaround h/w RT-SRAM
issues with the V3H v2.0 SoC.

Signed-off-by: Valentine Barshak <valentine.barshak@cogentembedded.com>
---
 drivers/renesas/common/ddr/ddr_b/boot_init_dram.c |    5 +
 drivers/renesas/common/dma/dma_driver.c           |    2 +-
 drivers/renesas/common/pfc_regs.h                 |    1 +
 drivers/renesas/common/rom/rom_api.c              |   21 +-
 drivers/renesas/common/scif/scif.S                |    2 +-
 drivers/renesas/rcar/board/board.c                |    5 +
 drivers/renesas/rcar/board/board.h                |    3 +-
 drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c       | 1031 +++++++++++++++++++++
 drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.h       |   37 +
 drivers/renesas/rcar/pfc/pfc.mk                   |    7 +
 drivers/renesas/rcar/pfc/pfc_init.c               |   13 +
 drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c   |  533 +++++++++++
 drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.h   |   37 +
 drivers/renesas/rcar/qos/qos.mk                   |    7 +
 drivers/renesas/rcar/qos/qos_init.c               |   24 +
 plat/renesas/common/bl2_cpg_init.c                |   69 ++
 plat/renesas/common/common.mk                     |    2 +
 plat/renesas/common/include/platform_def.h        |    8 +-
 plat/renesas/rcar/bl2_plat_setup.c                |   23 +-
 plat/renesas/rcar/platform.mk                     |   16 +
 tools/renesas/rcar_layout_create/makefile         |    4 +
 21 files changed, 1840 insertions(+), 10 deletions(-)
 create mode 100644 drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c
 create mode 100644 drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.h
 create mode 100644 drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c
 create mode 100644 drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.h

diff --git a/drivers/renesas/common/ddr/ddr_b/boot_init_dram.c b/drivers/renesas/common/ddr/ddr_b/boot_init_dram.c
index 17c3538..742fb6b 100644
--- a/drivers/renesas/common/ddr/ddr_b/boot_init_dram.c
+++ b/drivers/renesas/common/ddr/ddr_b/boot_init_dram.c
@@ -4170,6 +4170,11 @@ int32_t rcar_dram_init(void)
 	prr_cut = mmio_read_32(PRR) & PRR_CUT_MASK;
 #endif /* RCAR_DDR_FIXED_LSI_TYPE */
 
+	/* DRAM is initialized by CR7 */
+	if (prr_product == PRR_PRODUCT_V3H) {
+		return INITDRAM_OK;
+	}
+
 	if (prr_product == PRR_PRODUCT_H3) {
 		if (prr_cut <= PRR_PRODUCT_11) {
 			p_ddr_regdef_tbl =
diff --git a/drivers/renesas/common/dma/dma_driver.c b/drivers/renesas/common/dma/dma_driver.c
index 44ee985..9c50919 100644
--- a/drivers/renesas/common/dma/dma_driver.c
+++ b/drivers/renesas/common/dma/dma_driver.c
@@ -16,7 +16,7 @@
 #include "rcar_private.h"
 
 /* DMA CHANNEL setting (0/16/32) */
-#if RCAR_LSI == RCAR_V3M
+#if (RCAR_LSI == RCAR_V3M) || (RCAR_LSI == RCAR_V3H)	/* V3M/V3H */
 #define DMA_CH		16
 #else
 #define DMA_CH		0
diff --git a/drivers/renesas/common/pfc_regs.h b/drivers/renesas/common/pfc_regs.h
index 4187733..67470f1 100644
--- a/drivers/renesas/common/pfc_regs.h
+++ b/drivers/renesas/common/pfc_regs.h
@@ -206,6 +206,7 @@
 #define PFC_POCCTRL0		(PFC_BASE + 0x0380U)
 #define PFC_IOCTRL31		(PFC_BASE + 0x0384U)
 #define PFC_POCCTRL2		(PFC_BASE + 0x0388U)
+#define PFC_POCCTRL3		(PFC_BASE + 0x038CU)
 #define PFC_TDSELCTRL0		(PFC_BASE + 0x03C0U)
 #define PFC_IOCTRL		(PFC_BASE + 0x03E0U)
 #define PFC_TSREG		(PFC_BASE + 0x03E4U)
diff --git a/drivers/renesas/common/rom/rom_api.c b/drivers/renesas/common/rom/rom_api.c
index fda2815..a597528 100644
--- a/drivers/renesas/common/rom/rom_api.c
+++ b/drivers/renesas/common/rom/rom_api.c
@@ -21,7 +21,8 @@ typedef uint32_t(*rom_get_lcs_api_f) (uint32_t *lcs);
 #define OLD_API_TABLE3	(2U)	/* M3 Ver.1.0 */
 #define NEW_API_TABLE	(3U)	/* H3 Ver.3.0, M3 Ver.1.1 or later, M3N, E3, D3, V3M WS2.0 */
 #define NEW_API_TABLE2	(4U)	/* V3M WS1.0 */
-#define API_TABLE_MAX	(5U)	/* table max */
+#define NEW_API_TABLE3	(5U)	/* V3H WS1.0 */
+#define API_TABLE_MAX	(6U)	/* table max */
 				/* Later than H3 Ver.2.0 */
 
 static uint32_t get_table_index(void)
@@ -60,6 +61,14 @@ static uint32_t get_table_index(void)
 			/* V3M WS2.0 or later */
 			index = NEW_API_TABLE;
 		break;
+
+	case PRR_PRODUCT_V3H:
+		if (cut_ver == PRR_PRODUCT_10)
+			index = NEW_API_TABLE3;	/* V3H WS1.0 */
+		else
+			index = API_TABLE_MAX;
+		break;
+
 	default:
 		index = NEW_API_TABLE;
 		break;
@@ -77,11 +86,15 @@ uint32_t rcar_rom_secure_boot_api(uint32_t *key, uint32_t *cert,
 		0xEB1102FCU,	/* M3 Ver.1.0 */
 		0xEB100180U,	/* H3 Ver.3.0, M3 Ver.1.1 or later, M3N, E3, D3, V3M WS2.0 */
 		0xEB110128U,	/* V3M WS1.0 */
+		0xEB101960U,	/* V3H WS1.0 */
 	};
 	rom_secure_boot_api_f secure_boot;
 	uint32_t index;
 
 	index = get_table_index();
+	if (index >= API_TABLE_MAX)
+		return 1;
+
 	secure_boot = (rom_secure_boot_api_f) rom_api_table[index];
 
 	return secure_boot(key, cert, read_flash);
@@ -95,11 +108,17 @@ uint32_t rcar_rom_get_lcs(uint32_t *lcs)
 		0xEB110578U,	/* M3 Ver.1.0 */
 		0xEB10018CU,	/* H3 Ver.3.0, M3 Ver.1.1 or later, M3N, E3, D3, V3M WS2.0 */
 		0xEB1103A4U,	/* V3M WS1.0 */
+		0xEB101940U,	/* V3H WS1.0 */
 	};
 	rom_get_lcs_api_f get_lcs;
 	uint32_t index;
 
 	index = get_table_index();
+	if (index >= API_TABLE_MAX) {
+		*lcs = 0xffffffff;
+		return 0;
+	}
+
 	get_lcs = (rom_get_lcs_api_f) rom_get_lcs_table[index];
 
 	return get_lcs(lcs);
diff --git a/drivers/renesas/common/scif/scif.S b/drivers/renesas/common/scif/scif.S
index fcbd746..02d5a6b 100644
--- a/drivers/renesas/common/scif/scif.S
+++ b/drivers/renesas/common/scif/scif.S
@@ -47,7 +47,7 @@
 #define SCIF_DL			(0x30)
 #define SCIF_CKS		(0x34)
 
-#if RCAR_LSI == RCAR_V3M
+#if (RCAR_LSI == RCAR_V3M) || (RCAR_LSI == RCAR_V3H)	/* V3M or V3H */
 #define SCIF_BASE		SCIF0_BASE
 #define CPG_SMSTPCR		CPG_SMSTPCR2
 #define CPG_MSTPSR		CPG_MSTPSR2
diff --git a/drivers/renesas/rcar/board/board.c b/drivers/renesas/rcar/board/board.c
index 093b667..e29a4cb 100644
--- a/drivers/renesas/rcar/board/board.c
+++ b/drivers/renesas/rcar/board/board.c
@@ -20,6 +20,8 @@
 #define BOARD_DEFAULT		(BOARD_EBISU << BOARD_CODE_SHIFT)
 #elif (RCAR_LSI == RCAR_V3M)
 #define BOARD_DEFAULT		(BOARD_EAGLE << BOARD_CODE_SHIFT)
+#elif (RCAR_LSI == RCAR_V3H)
+#define BOARD_DEFAULT		(BOARD_CONDOR << BOARD_CODE_SHIFT)
 #else
 #define BOARD_DEFAULT		(BOARD_SALVATOR_X << BOARD_CODE_SHIFT)
 #endif
@@ -38,6 +40,7 @@
 #define EB_ID	{ 0x10U, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU }
 #define DR_ID	{ 0x10U, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU }
 #define EA_ID	{ 0x10U, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU }
+#define CR_ID	{ 0x10U, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU }
 #define KK_ID	{ 0x10U, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU }
 
 const char *g_board_tbl[] = {
@@ -50,6 +53,7 @@ const char *g_board_tbl[] = {
 	[BOARD_EBISU] = "Ebisu",
 	[BOARD_DRAAK] = "Draak",
 	[BOARD_EAGLE] = "Eagle",
+	[BOARD_CONDOR] = "Condor",
 	[BOARD_UNKNOWN] = "unknown"
 };
 
@@ -65,6 +69,7 @@ int32_t rcar_get_board_type(uint32_t *type, uint32_t *rev)
 		[BOARD_EBISU] = EB_ID,
 		[BOARD_DRAAK] = DR_ID,
 		[BOARD_EAGLE] = EA_ID,
+		[BOARD_CONDOR] = CR_ID,
 		[BOARD_KRIEK] = KK_ID,
 	};
 	static uint8_t board_id = BOARD_ID_UNKNOWN;
diff --git a/drivers/renesas/rcar/board/board.h b/drivers/renesas/rcar/board/board.h
index 51a8e30..6ea6842 100644
--- a/drivers/renesas/rcar/board/board.h
+++ b/drivers/renesas/rcar/board/board.h
@@ -17,7 +17,8 @@
 #define BOARD_EBISU_4D			(0x0DU)
 #define BOARD_DRAAK			(0x0EU)
 #define BOARD_EAGLE			(0x0FU)
-#define BOARD_UNKNOWN			(BOARD_EAGLE + 1U)
+#define BOARD_CONDOR			(0x10U)
+#define BOARD_UNKNOWN			(BOARD_CONDOR + 1U)
 
 #define BOARD_REV_UNKNOWN		(0xFF)
 
diff --git a/drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c b/drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c
new file mode 100644
index 0000000..49435a0
--- /dev/null
+++ b/drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c
@@ -0,0 +1,1031 @@
+/*
+ * Copyright (c) 2015-2017, Renesas Electronics Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of Renesas nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdint.h>		/* for uint32_t */
+#include <lib/mmio.h>
+#include "pfc_init_v3h.h"
+#include "include/rcar_def.h"
+#include "rcar_private.h"
+#include "../pfc_regs.h"
+
+#define	GPSR0_DU_EXODDF_DU_ODDF_DISP_CDE	((uint32_t)1U << 21U)
+#define	GPSR0_DU_EXVSYNC_DU_VSYNC		((uint32_t)1U << 20U)
+#define	GPSR0_DU_EXHSYNC_DU_HSYNC		((uint32_t)1U << 19U)
+#define	GPSR0_DU_EXHSYNC_DU_HSYNC_A		((uint32_t)0U << 19U)
+#define	GPSR0_DU_DOTCLKOUT	((uint32_t)1U << 18U)
+#define	GPSR0_DU_DB7		((uint32_t)1U << 17U)
+#define	GPSR0_DU_DB6		((uint32_t)1U << 16U)
+#define	GPSR0_DU_DB5		((uint32_t)1U << 15U)
+#define	GPSR0_DU_DB4		((uint32_t)1U << 14U)
+#define	GPSR0_DU_DB3		((uint32_t)1U << 13U)
+#define	GPSR0_DU_DB2		((uint32_t)1U << 12U)
+#define	GPSR0_DU_DG7		((uint32_t)1U << 11U)
+#define	GPSR0_DU_DG6		((uint32_t)1U << 10U)
+#define	GPSR0_DU_DG5		((uint32_t)1U << 9U)
+#define	GPSR0_DU_DG4		((uint32_t)1U << 8U)
+#define	GPSR0_DU_DG3		((uint32_t)1U << 7U)
+#define	GPSR0_DU_DG2		((uint32_t)1U << 6U)
+#define	GPSR0_DU_DR7		((uint32_t)1U << 5U)
+#define	GPSR0_DU_DR6		((uint32_t)1U << 4U)
+#define	GPSR0_DU_DR5		((uint32_t)1U << 3U)
+#define	GPSR0_DU_DR4		((uint32_t)1U << 2U)
+#define	GPSR0_DU_DR3		((uint32_t)1U << 1U)
+#define	GPSR0_DU_DR2		((uint32_t)1U << 0U)
+#define	GPSR1_DIGRF_CLKOUT	((uint32_t)1U << 27U)
+#define	GPSR1_DIGRF_CLKIN	((uint32_t)1U << 26U)
+#define	GPSR1_CANFD_CLK_A	((uint32_t)1U << 25U)
+#define	GPSR1_CANFD1_RX		((uint32_t)1U << 24U)
+#define	GPSR1_CANFD1_TX		((uint32_t)1U << 23U)
+#define	GPSR1_CANFD0_RX_A	((uint32_t)1U << 22U)
+#define	GPSR1_CANFD0_TX_A	((uint32_t)1U << 21U)
+#define	GPSR1_AVB_AVTP_CAPTURE		((uint32_t)1U << 20U)
+#define	GPSR1_AVB_AVTP_MATCH		((uint32_t)1U << 19U)
+#define	GPSR1_AVB_LINK		((uint32_t)1U << 18U)
+#define	GPSR1_AVB_PHY_INT	((uint32_t)1U << 17U)
+#define	GPSR1_AVB_MAGIC		((uint32_t)1U << 16U)
+#define	GPSR1_AVB_MDC		((uint32_t)1U << 15U)
+#define	GPSR1_AVB_MDIO		((uint32_t)1U << 14U)
+#define	GPSR1_AVB_TXCREFCLK	((uint32_t)1U << 13U)
+#define	GPSR1_AVB_TD3		((uint32_t)1U << 12U)
+#define	GPSR1_AVB_TD2		((uint32_t)1U << 11U)
+#define	GPSR1_AVB_TD1		((uint32_t)1U << 10U)
+#define	GPSR1_AVB_TD0		((uint32_t)1U << 9U)
+#define	GPSR1_AVB_TXC		((uint32_t)1U << 8U)
+#define	GPSR1_AVB_TX_CTL	((uint32_t)1U << 7U)
+#define	GPSR1_AVB_RD3		((uint32_t)1U << 6U)
+#define	GPSR1_AVB_RD2		((uint32_t)1U << 5U)
+#define	GPSR1_AVB_RD1		((uint32_t)1U << 4U)
+#define	GPSR1_AVB_RD0		((uint32_t)1U << 3U)
+#define	GPSR1_AVB_RXC		((uint32_t)1U << 2U)
+#define	GPSR1_AVB_RX_CTL	((uint32_t)1U << 1U)
+#define	GPSR1_IRQ0		((uint32_t)1U << 0U)
+#define	GPSR2_FSO_TOE		((uint32_t)1U << 29U)
+#define	GPSR2_FSO_CFE_1		((uint32_t)1U << 28U)
+#define	GPSR2_FSO_CFE_0		((uint32_t)1U << 27U)
+#define	GPSR2_SDA3			((uint32_t)1U << 26U)
+#define	GPSR2_SCL3			((uint32_t)1U << 25U)
+#define	GPSR2_MSIOF0_SS2	((uint32_t)1U << 24U)
+#define	GPSR2_MSIOF0_SS1	((uint32_t)1U << 23U)
+#define	GPSR2_MSIOF0_SYNC	((uint32_t)1U << 22U)
+#define	GPSR2_MSIOF0_SCK	((uint32_t)1U << 21U)
+#define	GPSR2_MSIOF0_TXD	((uint32_t)1U << 20U)
+#define	GPSR2_MSIOF0_RXD	((uint32_t)1U << 19U)
+#define	GPSR2_IRQ5			((uint32_t)1U << 18U)
+#define	GPSR2_IRQ4			((uint32_t)1U << 17U)
+#define	GPSR2_VI0_FIELD		((uint32_t)1U << 16U)
+#define	GPSR2_VI0_DATA11	((uint32_t)1U << 15U)
+#define	GPSR2_VI0_DATA10	((uint32_t)1U << 14U)
+#define	GPSR2_VI0_DATA9		((uint32_t)1U << 13U)
+#define	GPSR2_VI0_DATA8		((uint32_t)1U << 12U)
+#define	GPSR2_VI0_DATA7		((uint32_t)1U << 11U)
+#define	GPSR2_VI0_DATA6		((uint32_t)1U << 10U)
+#define	GPSR2_VI0_DATA5		((uint32_t)1U << 9U)
+#define	GPSR2_VI0_DATA4		((uint32_t)1U << 8U)
+#define	GPSR2_VI0_DATA3		((uint32_t)1U << 7U)
+#define	GPSR2_VI0_DATA2		((uint32_t)1U << 6U)
+#define	GPSR2_VI0_DATA1		((uint32_t)1U << 5U)
+#define	GPSR2_VI0_DATA0		((uint32_t)1U << 4U)
+#define	GPSR2_VI0_VSYNC		((uint32_t)1U << 3U)
+#define	GPSR2_VI0_HSYNC		((uint32_t)1U << 2U)
+#define	GPSR2_VI0_CLKENB	((uint32_t)1U << 1U)
+#define	GPSR2_VI0_CLK		((uint32_t)1U << 0U)
+#define	GPSR3_VI1_FIELD		((uint32_t)1U << 16U)
+#define	GPSR3_VI1_DATA11	((uint32_t)1U << 15U)
+#define	GPSR3_VI1_DATA10	((uint32_t)1U << 14U)
+#define	GPSR3_VI1_DATA9		((uint32_t)1U << 13U)
+#define	GPSR3_VI1_DATA8		((uint32_t)1U << 12U)
+#define	GPSR3_VI1_DATA7		((uint32_t)1U << 11U)
+#define	GPSR3_VI1_DATA6		((uint32_t)1U << 10U)
+#define	GPSR3_VI1_DATA5		((uint32_t)1U << 9U)
+#define	GPSR3_VI1_DATA4		((uint32_t)1U << 8U)
+#define	GPSR3_VI1_DATA3		((uint32_t)1U << 7U)
+#define	GPSR3_VI1_DATA2		((uint32_t)1U << 6U)
+#define	GPSR3_VI1_DATA1		((uint32_t)1U << 5U)
+#define	GPSR3_VI1_DATA0		((uint32_t)1U << 4U)
+#define	GPSR3_VI1_VSYNC		((uint32_t)1U << 3U)
+#define	GPSR3_VI1_HSYNC		((uint32_t)1U << 2U)
+#define	GPSR3_VI1_CLKENB	((uint32_t)1U << 1U)
+#define	GPSR3_VI1_CLK		((uint32_t)1U << 0U)
+#define	GPSR4_GETHER_LINK_A	((uint32_t)1U << 24U)
+#define	GPSR4_GETHER_PHY_INT_A		((uint32_t)1U << 23U)
+#define	GPSR4_GETHER_MAGIC	((uint32_t)1U << 22U)
+#define	GPSR4_GETHER_MDC_A	((uint32_t)1U << 21U)
+#define	GPSR4_GETHER_MDIO_A	((uint32_t)1U << 20U)
+#define	GPSR4_GETHER_TXCREFCLK_MEGA		((uint32_t)1U << 19U)
+#define	GPSR4_GETHER_TXCREFCLK		((uint32_t)1U << 18U)
+#define	GPSR4_GETHER_TD3	((uint32_t)1U << 17U)
+#define	GPSR4_GETHER_TD2	((uint32_t)1U << 16U)
+#define	GPSR4_GETHER_TD1	((uint32_t)1U << 15U)
+#define	GPSR4_GETHER_TD0	((uint32_t)1U << 14U)
+#define	GPSR4_GETHER_TXC	((uint32_t)1U << 13U)
+#define	GPSR4_GETHER_TX_CTL	((uint32_t)1U << 12U)
+#define	GPSR4_GETHER_RD3	((uint32_t)1U << 11U)
+#define	GPSR4_GETHER_RD2	((uint32_t)1U << 10U)
+#define	GPSR4_GETHER_RD1	((uint32_t)1U << 9U)
+#define	GPSR4_GETHER_RD0	((uint32_t)1U << 8U)
+#define	GPSR4_GETHER_RXC	((uint32_t)1U << 7U)
+#define	GPSR4_GETHER_RX_CTL	((uint32_t)1U << 6U)
+#define	GPSR4_SDA2			((uint32_t)1U << 5U)
+#define	GPSR4_SCL2			((uint32_t)1U << 4U)
+#define	GPSR4_SDA1			((uint32_t)1U << 3U)
+#define	GPSR4_SCL1			((uint32_t)1U << 2U)
+#define	GPSR4_SDA0			((uint32_t)1U << 1U)
+#define	GPSR4_SCL0			((uint32_t)1U << 0U)
+#define	GPSR5_RPC_INT		((uint32_t)1U << 14U)
+#define	GPSR5_RPC_WP		((uint32_t)1U << 13U)
+#define	GPSR5_RPC_RESET		((uint32_t)1U << 12U)
+#define	GPSR5_QSPI1_SSL		((uint32_t)1U << 11U)
+#define	GPSR5_QSPI1_IO3		((uint32_t)1U << 10U)
+#define	GPSR5_QSPI1_IO2		((uint32_t)1U << 9U)
+#define	GPSR5_QSPI1_MISO_IO1		((uint32_t)1U << 8U)
+#define	GPSR5_QSPI1_MOSI_IO0		((uint32_t)1U << 7U)
+#define	GPSR5_QSPI1_SPCLK	((uint32_t)1U << 6U)
+#define	GPSR5_QSPI0_SSL		((uint32_t)1U << 5U)
+#define	GPSR5_QSPI0_IO3		((uint32_t)1U << 4U)
+#define	GPSR5_QSPI0_IO2		((uint32_t)1U << 3U)
+#define	GPSR5_QSPI0_MISO_IO1		((uint32_t)1U << 2U)
+#define	GPSR5_QSPI0_MOSI_IO0		((uint32_t)1U << 1U)
+#define	GPSR5_QSPI0_SPCLK	((uint32_t)1U << 0U)
+
+#define	IPSR_28_FUNC(x)		((uint32_t)(x) << 28U)
+#define	IPSR_24_FUNC(x)		((uint32_t)(x) << 24U)
+#define	IPSR_20_FUNC(x)		((uint32_t)(x) << 20U)
+#define	IPSR_16_FUNC(x)		((uint32_t)(x) << 16U)
+#define	IPSR_12_FUNC(x)		((uint32_t)(x) << 12U)
+#define	IPSR_8_FUNC(x)		((uint32_t)(x) << 8U)
+#define	IPSR_4_FUNC(x)		((uint32_t)(x) << 4U)
+#define	IPSR_0_FUNC(x)		((uint32_t)(x) << 0U)
+
+#define IOCTRL0_MASK								(0x00000000U)
+#define IOCTRL1_MASK								(0x00000000U)
+#define IOCTRL2_MASK								(0x00000000U)
+#define IOCTRL3_MASK								(0x00000000U)
+#define IOCTRL4_MASK								(0x00000000U)
+#define IOCTRL5_MASK								(0x00000000U)
+#define IOCTRL6_MASK								(0x00000000U)
+#define IOCTRL7_MASK								(0x00000000U)
+#define IOCTRL8_MASK								(0x00000000U)
+#define IOCTRL9_MASK								(0x00000000U)
+#define IOCTRL10_MASK								(0x00000000U)
+#define IOCTRL11_MASK								(0x00000000U)
+#define IOCTRL12_MASK								(0x00000000U)
+#define IOCTRL13_MASK								(0x00000000U)
+#define IOCTRL14_MASK								(0x00000000U)
+#define IOCTRL15_MASK								(0x00000000U)
+#define IOCTRL16_MASK								(0x00000000U)
+#define IOCTRL17_MASK								(0x00000000U)
+#define IOCTRL18_MASK								(0x00000000U)
+#define IOCTRL19_MASK								(0x00000000U)
+
+#define IOCTRL0_DRV3_GETHER_DR2						((uint32_t)1U << 30U)
+#define IOCTRL0_DRV2_GETHER_DR2						((uint32_t)1U << 29U)
+#define IOCTRL0_DRV1_GETHER_DR2						((uint32_t)1U << 28U)
+#define IOCTRL0_DRV3_GETHER_DR3						((uint32_t)1U << 26U)
+#define IOCTRL0_DRV2_GETHER_DR3						((uint32_t)1U << 25U)
+#define IOCTRL0_DRV1_GETHER_DR3						((uint32_t)1U << 24U)
+#define IOCTRL0_DRV3_GETHER_DR4						((uint32_t)1U << 22U)
+#define IOCTRL0_DRV2_GETHER_DR4						((uint32_t)1U << 21U)
+#define IOCTRL0_DRV1_GETHER_DR4						((uint32_t)1U << 20U)
+#define IOCTRL0_DRV3_GETHER_DR5						((uint32_t)1U << 18U)
+#define IOCTRL0_DRV2_GETHER_DR5						((uint32_t)1U << 17U)
+#define IOCTRL0_DRV1_GETHER_DR5						((uint32_t)1U << 16U)
+#define IOCTRL0_DRV3_GETHER_DR6						((uint32_t)1U << 14U)
+#define IOCTRL0_DRV2_GETHER_DR6						((uint32_t)1U << 13U)
+#define IOCTRL0_DRV1_GETHER_DR6						((uint32_t)1U << 12U)
+#define IOCTRL0_DRV3_GETHER_DR7						((uint32_t)1U << 10U)
+#define IOCTRL0_DRV2_GETHER_DR7						((uint32_t)1U << 9U)
+#define IOCTRL0_DRV1_GETHER_DR7						((uint32_t)1U << 8U)
+#define IOCTRL0_DRV3_GETHER_DG2						((uint32_t)1U << 6U)
+#define IOCTRL0_DRV2_GETHER_DG2						((uint32_t)1U << 5U)
+#define IOCTRL0_DRV1_GETHER_DG2						((uint32_t)1U << 4U)
+#define IOCTRL0_DRV3_GETHER_DG3						((uint32_t)1U << 2U)
+#define IOCTRL0_DRV2_GETHER_DG3						((uint32_t)1U << 1U)
+#define IOCTRL0_DRV1_GETHER_DG3						((uint32_t)1U << 0U)
+#define IOCTRL1_DRV3_GETHER_DG4						((uint32_t)1U << 30U)
+#define IOCTRL1_DRV2_GETHER_DG4						((uint32_t)1U << 29U)
+#define IOCTRL1_DRV1_GETHER_DG4						((uint32_t)1U << 28U)
+#define IOCTRL1_DRV3_GETHER_DG5						((uint32_t)1U << 26U)
+#define IOCTRL1_DRV2_GETHER_DG5						((uint32_t)1U << 25U)
+#define IOCTRL1_DRV1_GETHER_DG5						((uint32_t)1U << 24U)
+#define IOCTRL1_DRV3_GETHER_DG6						((uint32_t)1U << 22U)
+#define IOCTRL1_DRV2_GETHER_DG6						((uint32_t)1U << 21U)
+#define IOCTRL1_DRV1_GETHER_DG6						((uint32_t)1U << 20U)
+#define IOCTRL1_DRV3_GETHER_DG7						((uint32_t)1U << 18U)
+#define IOCTRL1_DRV2_GETHER_DG7						((uint32_t)1U << 17U)
+#define IOCTRL1_DRV1_GETHER_DG7						((uint32_t)1U << 16U)
+#define IOCTRL1_DRV3_GETHER_DB2						((uint32_t)1U << 14U)
+#define IOCTRL1_DRV2_GETHER_DB2						((uint32_t)1U << 13U)
+#define IOCTRL1_DRV1_GETHER_DB2						((uint32_t)1U << 12U)
+#define IOCTRL1_DRV3_GETHER_DB3						((uint32_t)1U << 10U)
+#define IOCTRL1_DRV2_GETHER_DB3						((uint32_t)1U << 9U)
+#define IOCTRL1_DRV1_GETHER_DB3						((uint32_t)1U << 8U)
+#define IOCTRL1_DRV3_GETHER_DB4						((uint32_t)1U << 6U)
+#define IOCTRL1_DRV2_GETHER_DB4						((uint32_t)1U << 5U)
+#define IOCTRL1_DRV1_GETHER_DB4						((uint32_t)1U << 4U)
+#define IOCTRL1_DRV3_GETHER_DB5						((uint32_t)1U << 2U)
+#define IOCTRL1_DRV2_GETHER_DB5						((uint32_t)1U << 1U)
+#define IOCTRL1_DRV1_GETHER_DB5						((uint32_t)1U << 0U)
+#define IOCTRL2_DRV3_GETHER_DB6						((uint32_t)1U << 30U)
+#define IOCTRL2_DRV2_GETHER_DB6						((uint32_t)1U << 29U)
+#define IOCTRL2_DRV1_GETHER_DB6						((uint32_t)1U << 28U)
+#define IOCTRL2_DRV3_GETHER_DB7						((uint32_t)1U << 26U)
+#define IOCTRL2_DRV2_GETHER_DB7						((uint32_t)1U << 25U)
+#define IOCTRL2_DRV1_GETHER_DB7						((uint32_t)1U << 24U)
+#define IOCTRL2_DRV3_DU_DOTCLKOUT					((uint32_t)1U << 22U)
+#define IOCTRL2_DRV2_DU_DOTCLKOUT					((uint32_t)1U << 21U)
+#define IOCTRL2_DRV1_DU_DOTCLKOUT					((uint32_t)1U << 20U)
+#define IOCTRL2_DRV3_DU_EXHSYNC_DU_HSYNC				((uint32_t)1U << 18U)
+#define IOCTRL2_DRV2_DU_EXHSYNC_DU_HSYNC				((uint32_t)1U << 17U)
+#define IOCTRL2_DRV1_DU_EXHSYNC_DU_HSYNC				((uint32_t)1U << 16U)
+#define IOCTRL2_DRV3_DU_EXHSYNC_DU_VSYNC				((uint32_t)1U << 14U)
+#define IOCTRL2_DRV2_DU_EXHSYNC_DU_VSYNC				((uint32_t)1U << 13U)
+#define IOCTRL2_DRV1_DU_EXHSYNC_DU_VSYNC				((uint32_t)1U << 12U)
+#define IOCTRL2_DRV3_DU_EXODDF_DU_ODDF_DISP_CDE				((uint32_t)1U << 10U)
+#define IOCTRL2_DRV2_DU_EXODDF_DU_ODDF_DISP_CDE				((uint32_t)1U << 9U)
+#define IOCTRL2_DRV1_DU_EXODDF_DU_ODDF_DISP_CDE				((uint32_t)1U << 8U)
+#define IOCTRL3_DRV2_DU_DOTCLKIN					((uint32_t)1U << 29U)
+#define IOCTRL3_DRV1_DU_DOTCLKIN					((uint32_t)1U << 28U)
+#define IOCTRL3_DRV3_PRESETOUT						((uint32_t)1U << 22U)
+#define IOCTRL3_DRV2_PRESETOUT						((uint32_t)1U << 21U)
+#define IOCTRL3_DRV1_PRESETOUT						((uint32_t)1U << 20U)
+#define IOCTRL3_DRV2_FSCLKST						((uint32_t)1U << 1U)
+#define IOCTRL3_DRV1_FSCLKST						((uint32_t)1U << 0U)
+#define IOCTRL4_DRV2_FSCLKST2						((uint32_t)1U << 29U)
+#define IOCTRL4_DRV1_FSCLKST2						((uint32_t)1U << 28U)
+#define IOCTRL4_DRV3_IRQ0						((uint32_t)1U << 22U)
+#define IOCTRL4_DRV2_IRQ0						((uint32_t)1U << 21U)
+#define IOCTRL4_DRV1_IRQ0						((uint32_t)1U << 20U)
+#define IOCTRL4_DRV2_DCUTMS						((uint32_t)1U << 9U)
+#define IOCTRL4_DRV1_DCUTMS						((uint32_t)1U << 8U)
+#define IOCTRL4_DRV2_DCUTDO_LPDO					((uint32_t)1U << 1U)
+#define IOCTRL4_DRV1_DCUTDO_LPDO					((uint32_t)1U << 0U)
+#define IOCTRL5_DRV2_DCURDY_LPDCLKOUT					((uint32_t)1U << 29U)
+#define IOCTRL5_DRV1_DCURDY_LPDCLKOUT					((uint32_t)1U << 28U)
+#define IOCTRL5_DRV3_VI0_CLK						((uint32_t)1U << 26U)
+#define IOCTRL5_DRV2_VI0_CLK						((uint32_t)1U << 25U)
+#define IOCTRL5_DRV1_VI0_CLK						((uint32_t)1U << 24U)
+#define IOCTRL5_DRV3_VI0_CLKENB						((uint32_t)1U << 22U)
+#define IOCTRL5_DRV2_VI0_CLKENB						((uint32_t)1U << 21U)
+#define IOCTRL5_DRV1_VI0_CLKENB						((uint32_t)1U << 20U)
+#define IOCTRL5_DRV3_VI0_HSYNC						((uint32_t)1U << 18U)
+#define IOCTRL5_DRV2_VI0_HSYNC						((uint32_t)1U << 17U)
+#define IOCTRL5_DRV1_VI0_HSYNC						((uint32_t)1U << 16U)
+#define IOCTRL5_DRV3_VI0_VSYNC						((uint32_t)1U << 14U)
+#define IOCTRL5_DRV2_VI0_VSYNC						((uint32_t)1U << 13U)
+#define IOCTRL5_DRV1_VI0_VSYNC						((uint32_t)1U << 12U)
+#define IOCTRL5_DRV3_VI0_DATA0						((uint32_t)1U << 10U)
+#define IOCTRL5_DRV2_VI0_DATA0						((uint32_t)1U << 9U)
+#define IOCTRL5_DRV1_VI0_DATA0						((uint32_t)1U << 8U)
+#define IOCTRL5_DRV3_VI0_DATA1						((uint32_t)1U << 6U)
+#define IOCTRL5_DRV2_VI0_DATA1						((uint32_t)1U << 5U)
+#define IOCTRL5_DRV1_VI0_DATA1						((uint32_t)1U << 4U)
+#define IOCTRL5_DRV3_VI0_DATA2						((uint32_t)1U << 2U)
+#define IOCTRL5_DRV2_VI0_DATA2						((uint32_t)1U << 1U)
+#define IOCTRL5_DRV1_VI0_DATA2						((uint32_t)1U << 0U)
+#define IOCTRL6_DRV3_VI0_DATA3						((uint32_t)1U << 30U)
+#define IOCTRL6_DRV2_VI0_DATA3						((uint32_t)1U << 29U)
+#define IOCTRL6_DRV1_VI0_DATA3						((uint32_t)1U << 28U)
+#define IOCTRL6_DRV3_VI0_DATA4						((uint32_t)1U << 26U)
+#define IOCTRL6_DRV2_VI0_DATA4						((uint32_t)1U << 25U)
+#define IOCTRL6_DRV1_VI0_DATA4						((uint32_t)1U << 24U)
+#define IOCTRL6_DRV3_VI0_DATA5						((uint32_t)1U << 22U)
+#define IOCTRL6_DRV2_VI0_DATA5						((uint32_t)1U << 21U)
+#define IOCTRL6_DRV1_VI0_DATA5						((uint32_t)1U << 20U)
+#define IOCTRL6_DRV3_VI0_DATA6						((uint32_t)1U << 18U)
+#define IOCTRL6_DRV2_VI0_DATA6						((uint32_t)1U << 17U)
+#define IOCTRL6_DRV1_VI0_DATA6						((uint32_t)1U << 16U)
+#define IOCTRL6_DRV3_VI0_DATA7						((uint32_t)1U << 14U)
+#define IOCTRL6_DRV2_VI0_DATA7						((uint32_t)1U << 13U)
+#define IOCTRL6_DRV1_VI0_DATA7						((uint32_t)1U << 12U)
+#define IOCTRL6_DRV3_VI0_DATA8						((uint32_t)1U << 10U)
+#define IOCTRL6_DRV2_VI0_DATA8						((uint32_t)1U << 9U)
+#define IOCTRL6_DRV1_VI0_DATA8						((uint32_t)1U << 8U)
+#define IOCTRL6_DRV3_VI0_DATA9						((uint32_t)1U << 6U)
+#define IOCTRL6_DRV2_VI0_DATA9						((uint32_t)1U << 5U)
+#define IOCTRL6_DRV1_VI0_DATA9						((uint32_t)1U << 4U)
+#define IOCTRL6_DRV3_VI0_DATA10						((uint32_t)1U << 2U)
+#define IOCTRL6_DRV2_VI0_DATA10						((uint32_t)1U << 1U)
+#define IOCTRL6_DRV1_VI0_DATA10						((uint32_t)1U << 0U)
+#define IOCTRL7_DRV3_VI0_DATA11						((uint32_t)1U << 30U)
+#define IOCTRL7_DRV2_VI0_DATA11						((uint32_t)1U << 29U)
+#define IOCTRL7_DRV1_VI0_DATA11						((uint32_t)1U << 28U)
+#define IOCTRL7_DRV3_VI0_FIELD						((uint32_t)1U << 26U)
+#define IOCTRL7_DRV2_VI0_FIELD						((uint32_t)1U << 25U)
+#define IOCTRL7_DRV1_VI0_FIELD						((uint32_t)1U << 24U)
+#define IOCTRL7_DRV3_VI1_CLK						((uint32_t)1U << 22U)
+#define IOCTRL7_DRV2_VI1_CLK						((uint32_t)1U << 21U)
+#define IOCTRL7_DRV1_VI1_CLK						((uint32_t)1U << 20U)
+#define IOCTRL7_DRV3_VI1_CLKENB						((uint32_t)1U << 18U)
+#define IOCTRL7_DRV2_VI1_CLKENB						((uint32_t)1U << 17U)
+#define IOCTRL7_DRV1_VI1_CLKENB						((uint32_t)1U << 16U)
+#define IOCTRL7_DRV3_VI1_HSYNC						((uint32_t)1U << 14U)
+#define IOCTRL7_DRV2_VI1_HSYNC						((uint32_t)1U << 13U)
+#define IOCTRL7_DRV1_VI1_HSYNC						((uint32_t)1U << 12U)
+#define IOCTRL7_DRV3_VI1_VSYNC						((uint32_t)1U << 10U)
+#define IOCTRL7_DRV2_VI1_VSYNC						((uint32_t)1U << 9U)
+#define IOCTRL7_DRV1_VI1_VSYNC						((uint32_t)1U << 8U)
+#define IOCTRL7_DRV3_VI1_DATA0						((uint32_t)1U << 6U)
+#define IOCTRL7_DRV2_VI1_DATA0						((uint32_t)1U << 5U)
+#define IOCTRL7_DRV1_VI1_DATA0						((uint32_t)1U << 4U)
+#define IOCTRL7_DRV3_VI1_DATA1						((uint32_t)1U << 2U)
+#define IOCTRL7_DRV2_VI1_DATA1						((uint32_t)1U << 1U)
+#define IOCTRL7_DRV1_VI1_DATA1						((uint32_t)1U << 0U)
+#define IOCTRL8_DRV3_VI1_DATA2						((uint32_t)1U << 30U)
+#define IOCTRL8_DRV2_VI1_DATA2						((uint32_t)1U << 29U)
+#define IOCTRL8_DRV1_VI1_DATA2						((uint32_t)1U << 28U)
+#define IOCTRL8_DRV3_VI1_DATA3						((uint32_t)1U << 26U)
+#define IOCTRL8_DRV2_VI1_DATA3						((uint32_t)1U << 25U)
+#define IOCTRL8_DRV1_VI1_DATA3						((uint32_t)1U << 24U)
+#define IOCTRL8_DRV3_VI1_DATA4						((uint32_t)1U << 22U)
+#define IOCTRL8_DRV2_VI1_DATA4						((uint32_t)1U << 21U)
+#define IOCTRL8_DRV1_VI1_DATA4						((uint32_t)1U << 20U)
+#define IOCTRL8_DRV3_VI1_DATA5						((uint32_t)1U << 18U)
+#define IOCTRL8_DRV2_VI1_DATA5						((uint32_t)1U << 17U)
+#define IOCTRL8_DRV1_VI1_DATA5						((uint32_t)1U << 16U)
+#define IOCTRL8_DRV3_VI1_DATA6						((uint32_t)1U << 14U)
+#define IOCTRL8_DRV2_VI1_DATA6						((uint32_t)1U << 13U)
+#define IOCTRL8_DRV1_VI1_DATA6						((uint32_t)1U << 12U)
+#define IOCTRL8_DRV3_VI1_DATA7						((uint32_t)1U << 10U)
+#define IOCTRL8_DRV2_VI1_DATA7						((uint32_t)1U << 9U)
+#define IOCTRL8_DRV1_VI1_DATA7						((uint32_t)1U << 8U)
+#define IOCTRL8_DRV3_VI1_DATA8						((uint32_t)1U << 6U)
+#define IOCTRL8_DRV2_VI1_DATA8						((uint32_t)1U << 5U)
+#define IOCTRL8_DRV1_VI1_DATA8						((uint32_t)1U << 4U)
+#define IOCTRL8_DRV3_VI1_DATA9						((uint32_t)1U << 2U)
+#define IOCTRL8_DRV2_VI1_DATA9						((uint32_t)1U << 1U)
+#define IOCTRL8_DRV1_VI1_DATA9						((uint32_t)1U << 0U)
+#define IOCTRL9_DRV3_VI1_DATA10						((uint32_t)1U << 30U)
+#define IOCTRL9_DRV2_VI1_DATA10						((uint32_t)1U << 29U)
+#define IOCTRL9_DRV1_VI1_DATA10						((uint32_t)1U << 28U)
+#define IOCTRL9_DRV3_VI1_DATA11						((uint32_t)1U << 26U)
+#define IOCTRL9_DRV2_VI1_DATA11						((uint32_t)1U << 25U)
+#define IOCTRL9_DRV1_VI1_DATA11						((uint32_t)1U << 24U)
+#define IOCTRL9_DRV3_VI1_FIELD						((uint32_t)1U << 22U)
+#define IOCTRL9_DRV2_VI1_FIELD						((uint32_t)1U << 21U)
+#define IOCTRL9_DRV1_VI1_FIELD						((uint32_t)1U << 20U)
+#define IOCTRL9_DRV3_VI1_SCL0						((uint32_t)1U << 18U)
+#define IOCTRL9_DRV2_VI1_SCL0						((uint32_t)1U << 17U)
+#define IOCTRL9_DRV1_VI1_SCL0						((uint32_t)1U << 16U)
+#define IOCTRL9_DRV3_VI1_SDA0						((uint32_t)1U << 14U)
+#define IOCTRL9_DRV2_VI1_SDA0						((uint32_t)1U << 13U)
+#define IOCTRL9_DRV1_VI1_SDA0						((uint32_t)1U << 12U)
+#define IOCTRL9_DRV3_VI1_SCL1						((uint32_t)1U << 10U)
+#define IOCTRL9_DRV2_VI1_SCL1						((uint32_t)1U << 9U)
+#define IOCTRL9_DRV1_VI1_SCL1						((uint32_t)1U << 8U)
+#define IOCTRL9_DRV3_VI1_SDA1						((uint32_t)1U << 6U)
+#define IOCTRL9_DRV2_VI1_SDA1						((uint32_t)1U << 5U)
+#define IOCTRL9_DRV1_VI1_SDA1						((uint32_t)1U << 4U)
+#define IOCTRL9_DRV3_VI1_SCL2						((uint32_t)1U << 2U)
+#define IOCTRL9_DRV2_VI1_SCL2						((uint32_t)1U << 1U)
+#define IOCTRL9_DRV1_VI1_SCL2						((uint32_t)1U << 0U)
+#define IOCTRL10_DRV3_VI1_SDA2						((uint32_t)1U << 30U)
+#define IOCTRL10_DRV2_VI1_SDA2						((uint32_t)1U << 29U)
+#define IOCTRL10_DRV1_VI1_SDA2						((uint32_t)1U << 28U)
+#define IOCTRL10_DRV3_AVB_RX_CTL					((uint32_t)1U << 26U)
+#define IOCTRL10_DRV2_AVB_RX_CTL					((uint32_t)1U << 25U)
+#define IOCTRL10_DRV1_AVB_RX_CTL					((uint32_t)1U << 24U)
+#define IOCTRL10_DRV3_AVB_RX_RXC					((uint32_t)1U << 22U)
+#define IOCTRL10_DRV2_AVB_RX_RXC					((uint32_t)1U << 21U)
+#define IOCTRL10_DRV1_AVB_RX_RXC					((uint32_t)1U << 20U)
+#define IOCTRL10_DRV3_AVB_RX_RD0					((uint32_t)1U << 18U)
+#define IOCTRL10_DRV2_AVB_RX_RD0					((uint32_t)1U << 17U)
+#define IOCTRL10_DRV1_AVB_RX_RD0					((uint32_t)1U << 16U)
+#define IOCTRL10_DRV3_AVB_RX_RD1					((uint32_t)1U << 14U)
+#define IOCTRL10_DRV2_AVB_RX_RD1					((uint32_t)1U << 13U)
+#define IOCTRL10_DRV1_AVB_RX_RD1					((uint32_t)1U << 12U)
+#define IOCTRL10_DRV3_AVB_RX_RD2					((uint32_t)1U << 10U)
+#define IOCTRL10_DRV2_AVB_RX_RD2					((uint32_t)1U << 9U)
+#define IOCTRL10_DRV1_AVB_RX_RD2					((uint32_t)1U << 8U)
+#define IOCTRL10_DRV3_AVB_RX_RD3					((uint32_t)1U << 6U)
+#define IOCTRL10_DRV2_AVB_RX_RD3					((uint32_t)1U << 5U)
+#define IOCTRL10_DRV1_AVB_RX_RD3					((uint32_t)1U << 4U)
+#define IOCTRL10_DRV3_AVB_TX_CTL					((uint32_t)1U << 2U)
+#define IOCTRL10_DRV2_AVB_TX_CTL					((uint32_t)1U << 1U)
+#define IOCTRL10_DRV1_AVB_TX_CTL					((uint32_t)1U << 0U)
+#define IOCTRL11_DRV3_AVB_TXC						((uint32_t)1U << 30U)
+#define IOCTRL11_DRV2_AVB_TXC						((uint32_t)1U << 29U)
+#define IOCTRL11_DRV1_AVB_TXC						((uint32_t)1U << 28U)
+#define IOCTRL11_DRV3_AVB_TD0						((uint32_t)1U << 26U)
+#define IOCTRL11_DRV2_AVB_TD0						((uint32_t)1U << 25U)
+#define IOCTRL11_DRV1_AVB_TD0						((uint32_t)1U << 24U)
+#define IOCTRL11_DRV3_AVB_TD1						((uint32_t)1U << 22U)
+#define IOCTRL11_DRV2_AVB_TD1						((uint32_t)1U << 21U)
+#define IOCTRL11_DRV1_AVB_TD1						((uint32_t)1U << 20U)
+#define IOCTRL11_DRV3_AVB_TD2						((uint32_t)1U << 18U)
+#define IOCTRL11_DRV2_AVB_TD2						((uint32_t)1U << 17U)
+#define IOCTRL11_DRV1_AVB_TD2						((uint32_t)1U << 16U)
+#define IOCTRL11_DRV3_AVB_TD3						((uint32_t)1U << 14U)
+#define IOCTRL11_DRV2_AVB_TD3						((uint32_t)1U << 13U)
+#define IOCTRL11_DRV1_AVB_TD3						((uint32_t)1U << 12U)
+#define IOCTRL11_DRV3_AVB_TXCREFCLK					((uint32_t)1U << 10U)
+#define IOCTRL11_DRV2_AVB_TXCREFCLK					((uint32_t)1U << 9U)
+#define IOCTRL11_DRV1_AVB_TXCREFCLK					((uint32_t)1U << 8U)
+#define IOCTRL11_DRV3_AVB_MDIO						((uint32_t)1U << 6U)
+#define IOCTRL11_DRV2_AVB_MDIO						((uint32_t)1U << 5U)
+#define IOCTRL11_DRV1_AVB_MDIO						((uint32_t)1U << 4U)
+#define IOCTRL11_DRV3_AVB_MDC						((uint32_t)1U << 2U)
+#define IOCTRL11_DRV2_AVB_MDC						((uint32_t)1U << 1U)
+#define IOCTRL11_DRV1_AVB_MDC						((uint32_t)1U << 0U)
+#define IOCTRL12_DRV3_AVB_MAGIC						((uint32_t)1U << 30U)
+#define IOCTRL12_DRV2_AVB_MAGIC						((uint32_t)1U << 29U)
+#define IOCTRL12_DRV1_AVB_MAGIC						((uint32_t)1U << 28U)
+#define IOCTRL12_DRV3_AVB_PHY_INT					((uint32_t)1U << 26U)
+#define IOCTRL12_DRV2_AVB_PHY_INT					((uint32_t)1U << 25U)
+#define IOCTRL12_DRV1_AVB_PHY_INT					((uint32_t)1U << 24U)
+#define IOCTRL12_DRV3_AVB_LINK						((uint32_t)1U << 22U)
+#define IOCTRL12_DRV2_AVB_LINK						((uint32_t)1U << 21U)
+#define IOCTRL12_DRV1_AVB_LINK						((uint32_t)1U << 20U)
+#define IOCTRL12_DRV3_AVB_AVTP_MATCH					((uint32_t)1U << 18U)
+#define IOCTRL12_DRV2_AVB_AVTP_MATCH					((uint32_t)1U << 17U)
+#define IOCTRL12_DRV1_AVB_AVTP_MATCH					((uint32_t)1U << 16U)
+#define IOCTRL12_DRV3_AVB_AVTP_CAPTURE					((uint32_t)1U << 14U)
+#define IOCTRL12_DRV2_AVB_AVTP_CAPTURE					((uint32_t)1U << 13U)
+#define IOCTRL12_DRV1_AVB_AVTP_CAPTURE					((uint32_t)1U << 12U)
+#define IOCTRL12_DRV3_GETHER_RX_CTL					((uint32_t)1U << 10U)
+#define IOCTRL12_DRV2_GETHER_RX_CTL					((uint32_t)1U << 9U)
+#define IOCTRL12_DRV1_GETHER_RX_CTL					((uint32_t)1U << 8U)
+#define IOCTRL12_DRV3_GETHER_RXC					((uint32_t)1U << 6U)
+#define IOCTRL12_DRV2_GETHER_RXC					((uint32_t)1U << 5U)
+#define IOCTRL12_DRV1_GETHER_RXC					((uint32_t)1U << 4U)
+#define IOCTRL12_DRV3_GETHER_RD0					((uint32_t)1U << 2U)
+#define IOCTRL12_DRV2_GETHER_RD0					((uint32_t)1U << 1U)
+#define IOCTRL12_DRV1_GETHER_RD0					((uint32_t)1U << 0U)
+#define IOCTRL13_DRV3_GETHER_RD1					((uint32_t)1U << 30U)
+#define IOCTRL13_DRV2_GETHER_RD1					((uint32_t)1U << 29U)
+#define IOCTRL13_DRV1_GETHER_RD1					((uint32_t)1U << 28U)
+#define IOCTRL13_DRV3_GETHER_RD2					((uint32_t)1U << 26U)
+#define IOCTRL13_DRV2_GETHER_RD2					((uint32_t)1U << 25U)
+#define IOCTRL13_DRV1_GETHER_RD2					((uint32_t)1U << 24U)
+#define IOCTRL13_DRV3_GETHER_RD3					((uint32_t)1U << 22U)
+#define IOCTRL13_DRV2_GETHER_RD3					((uint32_t)1U << 21U)
+#define IOCTRL13_DRV1_GETHER_RD3					((uint32_t)1U << 20U)
+#define IOCTRL13_DRV3_GETHER_TX_CTL					((uint32_t)1U << 18U)
+#define IOCTRL13_DRV2_GETHER_TX_CTL					((uint32_t)1U << 17U)
+#define IOCTRL13_DRV1_GETHER_TX_CTL					((uint32_t)1U << 16U)
+#define IOCTRL13_DRV3_GETHER_TXC					((uint32_t)1U << 14U)
+#define IOCTRL13_DRV2_GETHER_TXC					((uint32_t)1U << 13U)
+#define IOCTRL13_DRV1_GETHER_TXC					((uint32_t)1U << 12U)
+#define IOCTRL13_DRV3_GETHER_TD0					((uint32_t)1U << 10U)
+#define IOCTRL13_DRV2_GETHER_TD0					((uint32_t)1U << 9U)
+#define IOCTRL13_DRV1_GETHER_TD0					((uint32_t)1U << 8U)
+#define IOCTRL13_DRV3_GETHER_TD1					((uint32_t)1U << 6U)
+#define IOCTRL13_DRV2_GETHER_TD1					((uint32_t)1U << 5U)
+#define IOCTRL13_DRV1_GETHER_TD1					((uint32_t)1U << 4U)
+#define IOCTRL13_DRV3_GETHER_TD2					((uint32_t)1U << 2U)
+#define IOCTRL13_DRV2_GETHER_TD2					((uint32_t)1U << 1U)
+#define IOCTRL13_DRV1_GETHER_TD2					((uint32_t)1U << 0U)
+#define IOCTRL13_DRV3_GETHER_TD3					((uint32_t)1U << 30U)
+#define IOCTRL13_DRV2_GETHER_TD3					((uint32_t)1U << 29U)
+#define IOCTRL13_DRV1_GETHER_TD3					((uint32_t)1U << 28U)
+#define IOCTRL14_DRV3_GETHER_TXCREFCLK					((uint32_t)1U << 26U)
+#define IOCTRL14_DRV2_GETHER_TXCREFCLK					((uint32_t)1U << 25U)
+#define IOCTRL14_DRV1_GETHER_TXCREFCLK					((uint32_t)1U << 24U)
+#define IOCTRL14_DRV3_GETHER_TXCREFCLK_MEGA				((uint32_t)1U << 22U)
+#define IOCTRL14_DRV2_GETHER_TXCREFCLK_MEGA				((uint32_t)1U << 21U)
+#define IOCTRL14_DRV1_GETHER_TXCREFCLK_MEGA				((uint32_t)1U << 20U)
+#define IOCTRL14_DRV3_GETHER_MDIO					((uint32_t)1U << 18U)
+#define IOCTRL14_DRV2_GETHER_MDIO					((uint32_t)1U << 17U)
+#define IOCTRL14_DRV1_GETHER_MDIO					((uint32_t)1U << 16U)
+#define IOCTRL14_DRV3_GETHER_MDC					((uint32_t)1U << 14U)
+#define IOCTRL14_DRV2_GETHER_MDC					((uint32_t)1U << 13U)
+#define IOCTRL14_DRV1_GETHER_MDC					((uint32_t)1U << 12U)
+#define IOCTRL14_DRV3_GETHER_MAGIC					((uint32_t)1U << 10U)
+#define IOCTRL14_DRV2_GETHER_MAGIC					((uint32_t)1U << 9U)
+#define IOCTRL14_DRV1_GETHER_MAGIC					((uint32_t)1U << 8U)
+#define IOCTRL14_DRV3_GETHER_PHY_INT					((uint32_t)1U << 6U)
+#define IOCTRL14_DRV2_GETHER_PHY_INT					((uint32_t)1U << 5U)
+#define IOCTRL14_DRV1_GETHER_PHY_INT					((uint32_t)1U << 4U)
+#define IOCTRL14_DRV3_GETHER_LINK					((uint32_t)1U << 2U)
+#define IOCTRL14_DRV2_GETHER_LINK					((uint32_t)1U << 1U)
+#define IOCTRL14_DRV1_GETHER_LINK					((uint32_t)1U << 0U)
+#define IOCTRL15_DRV3_CANFD0_TX						((uint32_t)1U << 30U)
+#define IOCTRL15_DRV2_CANFD0_TX						((uint32_t)1U << 29U)
+#define IOCTRL15_DRV1_CANFD0_TX						((uint32_t)1U << 28U)
+#define IOCTRL15_DRV3_CANFD0_RX						((uint32_t)1U << 26U)
+#define IOCTRL15_DRV2_CANFD0_RX						((uint32_t)1U << 25U)
+#define IOCTRL15_DRV1_CANFD0_RX						((uint32_t)1U << 24U)
+#define IOCTRL15_DRV3_CANFD1_TX						((uint32_t)1U << 22U)
+#define IOCTRL15_DRV2_CANFD1_TX						((uint32_t)1U << 21U)
+#define IOCTRL15_DRV1_CANFD1_TX						((uint32_t)1U << 20U)
+#define IOCTRL15_DRV3_CANFD1_RX						((uint32_t)1U << 18U)
+#define IOCTRL15_DRV2_CANFD1_RX						((uint32_t)1U << 17U)
+#define IOCTRL15_DRV1_CANFD1_RX						((uint32_t)1U << 16U)
+#define IOCTRL15_DRV3_CAN_CLK						((uint32_t)1U << 14U)
+#define IOCTRL15_DRV2_CAN_CLK						((uint32_t)1U << 13U)
+#define IOCTRL15_DRV1_CAN_CLK						((uint32_t)1U << 12U)
+#define IOCTRL15_DRV2_QSPI0_SPCLK					((uint32_t)1U << 9U)
+#define IOCTRL15_DRV1_QSPI0_SPCLK					((uint32_t)1U << 8U)
+#define IOCTRL15_DRV2_QSPI0_MOSI_IO0					((uint32_t)1U << 5U)
+#define IOCTRL15_DRV1_QSPI0_MOSI_IO0					((uint32_t)1U << 4U)
+#define IOCTRL15_DRV2_QSPI0_MOSI_IO1					((uint32_t)1U << 1U)
+#define IOCTRL15_DRV1_QSPI0_MOSI_IO1					((uint32_t)1U << 0U)
+#define IOCTRL16_DRV2_QSPI0_MOSI_IO2					((uint32_t)1U << 29U)
+#define IOCTRL16_DRV1_QSPI0_MOSI_IO2					((uint32_t)1U << 28U)
+#define IOCTRL16_DRV2_QSPI0_MOSI_IO3					((uint32_t)1U << 25U)
+#define IOCTRL16_DRV1_QSPI0_MOSI_IO3					((uint32_t)1U << 24U)
+#define IOCTRL16_DRV2_QSPI0_SSL						((uint32_t)1U << 21U)
+#define IOCTRL16_DRV1_QSPI0_SSL						((uint32_t)1U << 20U)
+#define IOCTRL16_DRV2_QSPI1_SPCLK					((uint32_t)1U << 17U)
+#define IOCTRL16_DRV1_QSPI1_SPCLK					((uint32_t)1U << 16U)
+#define IOCTRL16_DRV2_QSPI1_MOSI_IO0					((uint32_t)1U << 13U)
+#define IOCTRL16_DRV1_QSPI1_MOSI_IO0					((uint32_t)1U << 12U)
+#define IOCTRL16_DRV2_QSPI1_MOSI_IO1					((uint32_t)1U << 9U)
+#define IOCTRL16_DRV1_QSPI1_MOSI_IO1					((uint32_t)1U << 8U)
+#define IOCTRL16_DRV2_QSPI1_IO2						((uint32_t)1U << 5U)
+#define IOCTRL16_DRV1_QSPI1_IO2						((uint32_t)1U << 4U)
+#define IOCTRL16_DRV2_QSPI1_IO3						((uint32_t)1U << 1U)
+#define IOCTRL16_DRV1_QSPI1_IO3						((uint32_t)1U << 0U)
+#define IOCTRL17_DRV2_QSPI1_SSL						((uint32_t)1U << 29U)
+#define IOCTRL17_DRV1_QSPI1_SSL						((uint32_t)1U << 28U)
+#define IOCTRL17_DRV2_QSPI1_RPC_RESET					((uint32_t)1U << 25U)
+#define IOCTRL17_DRV1_QSPI1_RPC_RESET					((uint32_t)1U << 24U)
+#define IOCTRL17_DRV2_RPC_WP						((uint32_t)1U << 21U)
+#define IOCTRL17_DRV1_RPC_WP						((uint32_t)1U << 20U)
+#define IOCTRL17_DRV2_RPC_INT						((uint32_t)1U << 17U)
+#define IOCTRL17_DRV1_RPC_INT						((uint32_t)1U << 16U)
+#define IOCTRL17_DRV2_DIGRF_CLKIN					((uint32_t)1U << 13U)
+#define IOCTRL17_DRV1_DIGRF_CLKIN					((uint32_t)1U << 12U)
+#define IOCTRL17_DRV2_DIGRF_CLKOUT					((uint32_t)1U << 9U)
+#define IOCTRL17_DRV1_DIGRF_CLKOUT					((uint32_t)1U << 8U)
+#define IOCTRL17_DRV2_RPC_IRQ4						((uint32_t)1U << 5U)
+#define IOCTRL17_DRV1_RPC_IRQ4						((uint32_t)1U << 4U)
+#define IOCTRL17_DRV2_RPC_IRQ5						((uint32_t)1U << 1U)
+#define IOCTRL17_DRV1_RPC_IRQ5						((uint32_t)1U << 0U)
+#define IOCTRL18_DRV3_SCL3						((uint32_t)1U << 30U)
+#define IOCTRL18_DRV2_SCL3						((uint32_t)1U << 29U)
+#define IOCTRL18_DRV1_SCL3						((uint32_t)1U << 28U)
+#define IOCTRL18_DRV3_SDA3						((uint32_t)1U << 26U)
+#define IOCTRL18_DRV2_SDA3						((uint32_t)1U << 25U)
+#define IOCTRL18_DRV1_SDA3						((uint32_t)1U << 24U)
+#define IOCTRL18_DRV3_MSIOF0_RXD					((uint32_t)1U << 22U)
+#define IOCTRL18_DRV2_MSIOF0_RXD					((uint32_t)1U << 21U)
+#define IOCTRL18_DRV1_MSIOF0_RXD					((uint32_t)1U << 20U)
+#define IOCTRL18_DRV3_MSIOF0_TXD					((uint32_t)1U << 18U)
+#define IOCTRL18_DRV2_MSIOF0_TXD					((uint32_t)1U << 17U)
+#define IOCTRL18_DRV1_MSIOF0_TXD					((uint32_t)1U << 16U)
+#define IOCTRL18_DRV3_MSIOF0_SCK					((uint32_t)1U << 14U)
+#define IOCTRL18_DRV2_MSIOF0_SCK					((uint32_t)1U << 13U)
+#define IOCTRL18_DRV1_MSIOF0_SCK					((uint32_t)1U << 12U)
+#define IOCTRL18_DRV3_MSIOF0_SYNC					((uint32_t)1U << 10U)
+#define IOCTRL18_DRV2_MSIOF0_SYNC					((uint32_t)1U << 9U)
+#define IOCTRL18_DRV1_MSIOF0_SYNC					((uint32_t)1U << 8U)
+#define IOCTRL18_DRV3_MSIOF0_SS1					((uint32_t)1U << 6U)
+#define IOCTRL18_DRV2_MSIOF0_SS1					((uint32_t)1U << 5U)
+#define IOCTRL18_DRV1_MSIOF0_SS1					((uint32_t)1U << 4U)
+#define IOCTRL18_DRV3_MSIOF0_SS2					((uint32_t)1U << 2U)
+#define IOCTRL18_DRV2_MSIOF0_SS2					((uint32_t)1U << 1U)
+#define IOCTRL18_DRV1_MSIOF0_SS2					((uint32_t)1U << 0U)
+#define IOCTRL19_DRV3_FSO_CFE_0						((uint32_t)1U << 30U)
+#define IOCTRL19_DRV2_FSO_CFE_0						((uint32_t)1U << 29U)
+#define IOCTRL19_DRV1_FSO_CFE_0						((uint32_t)1U << 28U)
+#define IOCTRL19_DRV3_FSO_CFE_1						((uint32_t)1U << 26U)
+#define IOCTRL19_DRV2_FSO_CFE_1						((uint32_t)1U << 25U)
+#define IOCTRL19_DRV1_FSO_CFE_1						((uint32_t)1U << 24U)
+#define IOCTRL19_DRV3_FSO_TOE						((uint32_t)1U << 22U)
+#define IOCTRL19_DRV2_FSO_TOE						((uint32_t)1U << 21U)
+#define IOCTRL19_DRV1_FSO_TOE						((uint32_t)1U << 20U)
+
+#define IOCTRL30_POC_VI0_DATA5						((uint32_t)1U << 31U)
+#define IOCTRL30_POC_VI0_DATA4						((uint32_t)1U << 30U)
+#define IOCTRL30_POC_VI0_DATA3						((uint32_t)1U << 29U)
+#define IOCTRL30_POC_VI0_DATA2						((uint32_t)1U << 28U)
+#define IOCTRL30_POC_VI0_DATA1						((uint32_t)1U << 27U)
+#define IOCTRL30_POC_VI0_DATA0						((uint32_t)1U << 26U)
+#define IOCTRL30_POC_VI0_VSYNC_N					((uint32_t)1U << 25U)
+#define IOCTRL30_POC_VI0_HSYNC_N					((uint32_t)1U << 24U)
+#define IOCTRL30_POC_VI0_CLKENB						((uint32_t)1U << 23U)
+#define IOCTRL30_POC_VI0_CLK						((uint32_t)1U << 22U)
+#define IOCTRL30_POC_DU_EXODDF_DU_ODDF_DISP_CDE				((uint32_t)1U << 21U)
+#define IOCTRL30_POC_DU_EXVSYNC_DU_VSYNC				((uint32_t)1U << 20U)
+#define IOCTRL30_POC_DU_EXHSYNC_DU_HSYNC				((uint32_t)1U << 19U)
+#define IOCTRL30_POC_DU_DOTCLKOUT					((uint32_t)1U << 18U)
+#define IOCTRL30_POC_DU_DB7						((uint32_t)1U << 17U)
+#define IOCTRL30_POC_DU_DB6						((uint32_t)1U << 16U)
+#define IOCTRL30_POC_DU_DB5						((uint32_t)1U << 15U)
+#define IOCTRL30_POC_DU_DB4						((uint32_t)1U << 14U)
+#define IOCTRL30_POC_DU_DB3						((uint32_t)1U << 13U)
+#define IOCTRL30_POC_DU_DB2						((uint32_t)1U << 12U)
+#define IOCTRL30_POC_DU_DG7						((uint32_t)1U << 11U)
+#define IOCTRL30_POC_DU_DG6						((uint32_t)1U << 10U)
+#define IOCTRL30_POC_DU_DG5						((uint32_t)1U << 9U)
+#define IOCTRL30_POC_DU_DG4						((uint32_t)1U << 8U)
+#define IOCTRL30_POC_DU_DG3						((uint32_t)1U << 7U)
+#define IOCTRL30_POC_DU_DG2						((uint32_t)1U << 6U)
+#define IOCTRL30_POC_DU_DR7						((uint32_t)1U << 5U)
+#define IOCTRL30_POC_DU_DR6						((uint32_t)1U << 4U)
+#define IOCTRL30_POC_DU_DR5						((uint32_t)1U << 3U)
+#define IOCTRL30_POC_DU_DR4						((uint32_t)1U << 2U)
+#define IOCTRL30_POC_DU_DR3						((uint32_t)1U << 1U)
+#define IOCTRL30_POC_DU_DR2						((uint32_t)1U << 0U)
+
+#define IOCTRL31_POC_MSIOF0_SS2						((uint32_t)1U << 31U)
+#define IOCTRL31_POC_MSIOF0_SS1						((uint32_t)1U << 30U)
+#define IOCTRL31_POC_MSIOF0_SYNC					((uint32_t)1U << 29U)
+#define IOCTRL31_POC_MSIOF0_SCK						((uint32_t)1U << 28U)
+#define IOCTRL31_POC_MSIOF0_TXD						((uint32_t)1U << 27U)
+#define IOCTRL31_POC_MSIOF0_RXD						((uint32_t)1U << 26U)
+#define IOCTRL31_POC_MSIOF0_IRQ5					((uint32_t)1U << 25U)
+#define IOCTRL31_POC_MSIOF0_IRQ4					((uint32_t)1U << 24U)
+#define IOCTRL31_POC_VI1_FIELD						((uint32_t)1U << 23U)
+#define IOCTRL31_POC_VI1_DATA11						((uint32_t)1U << 22U)
+#define IOCTRL31_POC_VI1_DATA10						((uint32_t)1U << 21U)
+#define IOCTRL31_POC_VI1_DATA9						((uint32_t)1U << 20U)
+#define IOCTRL31_POC_VI1_DATA8						((uint32_t)1U << 19U)
+#define IOCTRL31_POC_VI1_DATA7						((uint32_t)1U << 18U)
+#define IOCTRL31_POC_VI1_DATA6						((uint32_t)1U << 17U)
+#define IOCTRL31_POC_VI1_DATA5						((uint32_t)1U << 16U)
+#define IOCTRL31_POC_VI1_DATA4						((uint32_t)1U << 15U)
+#define IOCTRL31_POC_VI1_DATA3						((uint32_t)1U << 14U)
+#define IOCTRL31_POC_VI1_DATA2						((uint32_t)1U << 13U)
+#define IOCTRL31_POC_VI1_DATA1						((uint32_t)1U << 12U)
+#define IOCTRL31_POC_VI1_DATA0						((uint32_t)1U << 11U)
+#define IOCTRL31_POC_VI1_VSYNC						((uint32_t)1U << 10U)
+#define IOCTRL31_POC_VI1_HSYNC						((uint32_t)1U << 9U)
+#define IOCTRL31_POC_VI1_CLKENB						((uint32_t)1U << 8U)
+#define IOCTRL31_POC_VI1_CLK						((uint32_t)1U << 7U)
+#define IOCTRL31_POC_VI0_FIELD						((uint32_t)1U << 6U)
+#define IOCTRL31_POC_VI0_DATA11						((uint32_t)1U << 5U)
+#define IOCTRL31_POC_VI0_DATA10						((uint32_t)1U << 4U)
+#define IOCTRL31_POC_VI0_DATA9						((uint32_t)1U << 3U)
+#define IOCTRL31_POC_VI0_DATA8						((uint32_t)1U << 2U)
+#define IOCTRL31_POC_VI0_DATA7						((uint32_t)1U << 1U)
+#define IOCTRL31_POC_VI0_DATA6						((uint32_t)1U << 0U)
+#define IOCTRL32_POC_FSO_TOE						((uint32_t)1U << 4U)
+#define IOCTRL32_POC_FSO_CFE_1						((uint32_t)1U << 3U)
+#define IOCTRL32_POC_FSO_CFE_0						((uint32_t)1U << 2U)
+#define IOCTRL32_POC_SDA3						((uint32_t)1U << 1U)
+#define IOCTRL32_POC_SCL3						((uint32_t)1U << 0U)
+#define IOCTRL40_SD0TDSEL1						((uint32_t)1U << 1U)
+#define IOCTRL40_SD0TDSEL0						((uint32_t)1U << 0U)
+
+#define	MOD_sel_canfd0_A		((uint32_t)0U << 11U)
+#define	MOD_sel_canfd0_B		((uint32_t)1U << 11U)
+#define	MOD_sel_gether_A		((uint32_t)0U << 10U)
+#define	MOD_sel_gether_B		((uint32_t)1U << 10U)
+#define	MOD_sel_hscif0_A		((uint32_t)0U << 9U)
+#define	MOD_sel_hscif0_B		((uint32_t)1U << 9U)
+#define	MOD_sel_pwm0_A			((uint32_t)0U << 8U)
+#define	MOD_sel_pwm0_B			((uint32_t)1U << 8U)
+#define	MOD_sel_pwm1_A			((uint32_t)0U << 7U)
+#define	MOD_sel_pwm1_B			((uint32_t)1U << 7U)
+#define	MOD_sel_pwm2_A			((uint32_t)0U << 6U)
+#define	MOD_sel_pwm2_B			((uint32_t)1U << 6U)
+#define	MOD_sel_pwm3_A			((uint32_t)0U << 5U)
+#define	MOD_sel_pwm3_B			((uint32_t)1U << 5U)
+#define	MOD_sel_pwm4_A			((uint32_t)0U << 4U)
+#define	MOD_sel_pwm4_B			((uint32_t)1U << 4U)
+#define	MOD_sel_rsp_A			((uint32_t)0U << 2U)
+#define	MOD_sel_rsp_B			((uint32_t)1U << 2U)
+#define	MOD_sel_scif1_A			((uint32_t)0U << 1U)
+#define	MOD_sel_scif1_B			((uint32_t)1U << 1U)
+#define	MOD_sel_tmu_A			((uint32_t)0U << 0U)
+#define	MOD_sel_tmu_B			((uint32_t)1U << 0U)
+
+
+static void pfc_reg_write(uint32_t addr, uint32_t data);
+
+static void pfc_reg_write(uint32_t addr, uint32_t data)
+{
+	mmio_write_32(PFC_PMMR, ~data);
+	mmio_write_32((uintptr_t)addr, data);
+}
+
+
+void pfc_init_v3h(void)
+{
+
+	/* initialize module select */
+	pfc_reg_write(PFC_MOD_SEL0, MOD_sel_canfd0_A
+				  | MOD_sel_gether_A
+				  | MOD_sel_hscif0_B
+				  | MOD_sel_pwm0_A
+				  | MOD_sel_pwm1_A
+				  | MOD_sel_pwm2_A
+				  | MOD_sel_pwm3_A
+				  | MOD_sel_pwm4_A
+				  | MOD_sel_rsp_A
+				  | MOD_sel_scif1_A
+				  | MOD_sel_tmu_A);
+
+	/* initialize peripheral function select */
+	pfc_reg_write(PFC_IPSR0, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR1, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR2, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR3, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR4, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR5, IPSR_28_FUNC(4)
+			       | IPSR_24_FUNC(4)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR6, IPSR_28_FUNC(4)
+			       | IPSR_24_FUNC(4)
+			       | IPSR_20_FUNC(4)
+			       | IPSR_16_FUNC(4)
+			       | IPSR_12_FUNC(4)
+			       | IPSR_8_FUNC(4)
+			       | IPSR_4_FUNC(4)
+			       | IPSR_0_FUNC(4));
+	pfc_reg_write(PFC_IPSR7, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(4)
+			       | IPSR_20_FUNC(4)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(4));
+	pfc_reg_write(PFC_IPSR8, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(4)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR9, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR10, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+
+	/* initialize GPIO/perihperal function select */
+	pfc_reg_write(PFC_GPSR0, 0x00000000);
+
+	pfc_reg_write(PFC_GPSR1, GPSR1_DIGRF_CLKOUT
+			       | GPSR1_DIGRF_CLKIN
+			       | GPSR1_CANFD_CLK_A
+			       | GPSR1_CANFD0_RX_A
+			       | GPSR1_CANFD0_TX_A
+			       | GPSR1_AVB_LINK
+			       | GPSR1_AVB_PHY_INT
+			       | GPSR1_AVB_MDC
+			       | GPSR1_AVB_MDIO
+			       | GPSR1_AVB_TXCREFCLK
+			       | GPSR1_AVB_TD3
+			       | GPSR1_AVB_TD2
+			       | GPSR1_AVB_TD1
+			       | GPSR1_AVB_TD0
+			       | GPSR1_AVB_TXC
+			       | GPSR1_AVB_TX_CTL
+			       | GPSR1_AVB_RD3
+			       | GPSR1_AVB_RD2
+			       | GPSR1_AVB_RD1
+			       | GPSR1_AVB_RD0
+			       | GPSR1_AVB_RXC
+			       | GPSR1_AVB_RX_CTL
+			       | GPSR1_IRQ0);
+
+	pfc_reg_write(PFC_GPSR2, 0x00000000);
+
+	pfc_reg_write(PFC_GPSR3, GPSR3_VI1_FIELD
+			       | GPSR3_VI1_DATA11
+			       | GPSR3_VI1_DATA10
+			       | GPSR3_VI1_DATA9
+			       | GPSR3_VI1_DATA8
+			       | GPSR3_VI1_DATA7
+			       | GPSR3_VI1_DATA6
+			       | GPSR3_VI1_DATA5
+			       | GPSR3_VI1_DATA4
+			       | GPSR3_VI1_DATA3
+			       | GPSR3_VI1_DATA2);
+
+	pfc_reg_write(PFC_GPSR4, GPSR4_GETHER_LINK_A
+			       | GPSR4_GETHER_PHY_INT_A
+			       | GPSR4_GETHER_MDC_A
+			       | GPSR4_GETHER_MDIO_A
+			       | GPSR4_GETHER_TXCREFCLK_MEGA
+			       | GPSR4_GETHER_TXCREFCLK
+			       | GPSR4_GETHER_TD3
+			       | GPSR4_GETHER_TD2
+			       | GPSR4_GETHER_TD1
+			       | GPSR4_GETHER_TD0
+			       | GPSR4_GETHER_TXC
+			       | GPSR4_GETHER_TX_CTL
+			       | GPSR4_GETHER_RD3
+			       | GPSR4_GETHER_RD2
+			       | GPSR4_GETHER_RD1
+			       | GPSR4_GETHER_RD0
+			       | GPSR4_GETHER_RXC
+			       | GPSR4_GETHER_RX_CTL
+			       | GPSR4_SDA2
+			       | GPSR4_SCL2
+			       | GPSR4_SDA1
+			       | GPSR4_SCL1
+			       | GPSR4_SDA0
+			       | GPSR4_SCL0);
+
+	pfc_reg_write(PFC_GPSR5, GPSR5_QSPI1_SSL
+			       | GPSR5_QSPI1_IO3
+			       | GPSR5_QSPI1_IO2
+			       | GPSR5_QSPI1_MISO_IO1
+			       | GPSR5_QSPI1_MOSI_IO0
+			       | GPSR5_QSPI1_SPCLK
+			       | GPSR5_QSPI0_SSL
+			       | GPSR5_QSPI0_IO3
+			       | GPSR5_QSPI0_IO2
+			       | GPSR5_QSPI0_MISO_IO1
+			       | GPSR5_QSPI0_MOSI_IO0
+			       | GPSR5_QSPI0_SPCLK);
+
+	
+	
+	/* initialize POC Control */
+
+	pfc_reg_write(PFC_POCCTRL0, IOCTRL30_POC_VI0_DATA5
+			       | IOCTRL30_POC_VI0_DATA4
+			       | IOCTRL30_POC_VI0_DATA3
+			       | IOCTRL30_POC_VI0_DATA2
+			       | IOCTRL30_POC_VI0_DATA1
+			       | IOCTRL30_POC_VI0_DATA0
+			       | IOCTRL30_POC_VI0_VSYNC_N
+			       | IOCTRL30_POC_VI0_HSYNC_N
+			       | IOCTRL30_POC_VI0_CLKENB
+			       | IOCTRL30_POC_VI0_CLK
+			       | IOCTRL30_POC_DU_EXODDF_DU_ODDF_DISP_CDE
+			       | IOCTRL30_POC_DU_EXVSYNC_DU_VSYNC
+			       | IOCTRL30_POC_DU_EXHSYNC_DU_HSYNC
+			       | IOCTRL30_POC_DU_DOTCLKOUT
+			       | IOCTRL30_POC_DU_DB7
+			       | IOCTRL30_POC_DU_DB6
+			       | IOCTRL30_POC_DU_DB5
+			       | IOCTRL30_POC_DU_DB4
+			       | IOCTRL30_POC_DU_DB3
+			       | IOCTRL30_POC_DU_DB2
+			       | IOCTRL30_POC_DU_DG7
+			       | IOCTRL30_POC_DU_DG6
+			       | IOCTRL30_POC_DU_DG5
+			       | IOCTRL30_POC_DU_DG4
+			       | IOCTRL30_POC_DU_DG3
+			       | IOCTRL30_POC_DU_DG2
+			       | IOCTRL30_POC_DU_DR7
+			       | IOCTRL30_POC_DU_DR6
+			       | IOCTRL30_POC_DU_DR5
+			       | IOCTRL30_POC_DU_DR4
+			       | IOCTRL30_POC_DU_DR3
+			       | IOCTRL30_POC_DU_DR2);
+
+	pfc_reg_write(PFC_IOCTRL31, IOCTRL31_POC_MSIOF0_SS2
+			       | IOCTRL31_POC_MSIOF0_SS1
+			       | IOCTRL31_POC_MSIOF0_SYNC
+			       | IOCTRL31_POC_MSIOF0_SCK
+			       | IOCTRL31_POC_MSIOF0_TXD
+			       | IOCTRL31_POC_MSIOF0_RXD
+			       | IOCTRL31_POC_MSIOF0_IRQ5
+			       | IOCTRL31_POC_MSIOF0_IRQ4
+			       | IOCTRL31_POC_VI1_FIELD
+			       | IOCTRL31_POC_VI1_DATA11
+			       | IOCTRL31_POC_VI1_DATA10
+			       | IOCTRL31_POC_VI1_DATA9
+			       | IOCTRL31_POC_VI1_DATA8
+			       | IOCTRL31_POC_VI1_DATA7
+			       | IOCTRL31_POC_VI1_DATA6
+			       | IOCTRL31_POC_VI1_DATA5
+			       | IOCTRL31_POC_VI1_DATA4
+			       | IOCTRL31_POC_VI1_DATA3
+			       | IOCTRL31_POC_VI1_DATA2
+			       | IOCTRL31_POC_VI1_DATA1
+			       | IOCTRL31_POC_VI1_DATA0
+			       | IOCTRL31_POC_VI1_VSYNC
+			       | IOCTRL31_POC_VI1_HSYNC
+			       | IOCTRL31_POC_VI1_CLKENB
+			       | IOCTRL31_POC_VI1_CLK
+			       | IOCTRL31_POC_VI0_FIELD
+			       | IOCTRL31_POC_VI0_DATA11
+			       | IOCTRL31_POC_VI0_DATA10
+			       | IOCTRL31_POC_VI0_DATA9
+			       | IOCTRL31_POC_VI0_DATA8
+			       | IOCTRL31_POC_VI0_DATA7
+			       | IOCTRL31_POC_VI0_DATA6
+			       | IOCTRL31_POC_VI0_DATA6);
+
+	pfc_reg_write(PFC_POCCTRL2, IOCTRL32_POC_FSO_TOE
+			       | IOCTRL32_POC_FSO_CFE_1
+			       | IOCTRL32_POC_FSO_CFE_0
+			       | IOCTRL32_POC_SDA3
+			       | IOCTRL32_POC_SCL3);
+
+	pfc_reg_write(PFC_POCCTRL3,0x00000000);
+
+	pfc_reg_write(PFC_TDSELCTRL0,0x00000000);
+	
+
+	/* initialize LSI pin pull-up/down control */
+	pfc_reg_write(PFC_PUD0,0x80000000U);
+	pfc_reg_write(PFC_PUD1,0x1B01C77CU);
+	pfc_reg_write(PFC_PUD2,0x00000000U);
+	pfc_reg_write(PFC_PUD3,0x0F800008U);
+	pfc_reg_write(PFC_PUD4,0x03807C00U);
+
+	/* initialize LSI pin pull-enable register */
+	pfc_reg_write(PFC_PUEN0,0x0035F721U);
+	pfc_reg_write(PFC_PUEN1,0x7E01C700U);
+	pfc_reg_write(PFC_PUEN2,0x003F0000U);
+	pfc_reg_write(PFC_PUEN3,0x07000000U);
+	pfc_reg_write(PFC_PUEN4,0x0381E800U);
+	
+	/* initialize positive/negative logic select */
+	mmio_write_32(GPIO_POSNEG0, 0x00000000U);
+	mmio_write_32(GPIO_POSNEG1, 0x00000000U);
+	mmio_write_32(GPIO_POSNEG2, 0x00000000U);
+	mmio_write_32(GPIO_POSNEG3, 0x00000000U);
+	mmio_write_32(GPIO_POSNEG4, 0x00000000U);
+	mmio_write_32(GPIO_POSNEG5, 0x00000000U);
+
+	/* initialize general IO/interrupt switching */
+	mmio_write_32(GPIO_IOINTSEL0, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL1, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL2, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL3, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL4, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL5, 0x00000000U);
+
+	/* initialize general output register */
+	mmio_write_32(GPIO_OUTDT1, 0x00010000U);
+	mmio_write_32(GPIO_OUTDT4, 0x00400000U);
+	mmio_write_32(GPIO_OUTDT5, 0x00007000U);
+
+	/* initialize general input/output switching */
+	mmio_write_32(GPIO_INOUTSEL0, 0x00000000U);
+	mmio_write_32(GPIO_INOUTSEL1, 0x00010000U);
+	mmio_write_32(GPIO_INOUTSEL2, 0x00000000U);
+	mmio_write_32(GPIO_INOUTSEL3, 0x00000000U);
+	mmio_write_32(GPIO_INOUTSEL4, 0x00400000U);
+	mmio_write_32(GPIO_INOUTSEL5, 0x00007000U);
+}
diff --git a/drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.h b/drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.h
new file mode 100644
index 0000000..6ecedb5
--- /dev/null
+++ b/drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2015-2017, Renesas Electronics Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of Renesas nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef PFC_INIT_V3H_H__
+#define PFC_INIT_V3H_H__
+
+void pfc_init_v3h(void);
+
+#endif	/* PFC_INIT_V3H_H__ */
diff --git a/drivers/renesas/rcar/pfc/pfc.mk b/drivers/renesas/rcar/pfc/pfc.mk
index f1dd92c..c3c7855 100644
--- a/drivers/renesas/rcar/pfc/pfc.mk
+++ b/drivers/renesas/rcar/pfc/pfc.mk
@@ -10,6 +10,7 @@ ifeq (${RCAR_LSI},${RCAR_AUTO})
     BL2_SOURCES += drivers/renesas/rcar/pfc/M3/pfc_init_m3.c
     BL2_SOURCES += drivers/renesas/rcar/pfc/M3N/pfc_init_m3n.c
     BL2_SOURCES += drivers/renesas/rcar/pfc/V3M/pfc_init_v3m.c
+    BL2_SOURCES += drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c
 
 else ifdef RCAR_LSI_CUT_COMPAT
   ifeq (${RCAR_LSI},${RCAR_H3})
@@ -29,6 +30,9 @@ else ifdef RCAR_LSI_CUT_COMPAT
   ifeq (${RCAR_LSI},${RCAR_V3M})
     BL2_SOURCES += drivers/renesas/rcar/pfc/V3M/pfc_init_v3m.c
   endif
+  ifeq (${RCAR_LSI},${RCAR_V3H})
+    BL2_SOURCES += drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c
+  endif
   ifeq (${RCAR_LSI},${RCAR_E3})
     BL2_SOURCES += drivers/renesas/rcar/pfc/E3/pfc_init_e3.c
   endif
@@ -58,6 +62,9 @@ else
   ifeq (${RCAR_LSI},${RCAR_V3M})
     BL2_SOURCES += drivers/renesas/rcar/pfc/V3M/pfc_init_v3m.c
   endif
+  ifeq (${RCAR_LSI},${RCAR_V3H})
+    BL2_SOURCES += drivers/renesas/rcar/pfc/V3H/pfc_init_v3h.c
+  endif
   ifeq (${RCAR_LSI},${RCAR_E3})
     BL2_SOURCES += drivers/renesas/rcar/pfc/E3/pfc_init_e3.c
   endif
diff --git a/drivers/renesas/rcar/pfc/pfc_init.c b/drivers/renesas/rcar/pfc/pfc_init.c
index 8810667..3de4a42 100644
--- a/drivers/renesas/rcar/pfc/pfc_init.c
+++ b/drivers/renesas/rcar/pfc/pfc_init.c
@@ -30,6 +30,9 @@
 #if RCAR_LSI == RCAR_V3M	/* V3M */
 #include "V3M/pfc_init_v3m.h"
 #endif
+#if RCAR_LSI == RCAR_V3H	/* V3H */
+#include "V3H/pfc_init_v3h.h"
+#endif
 #if RCAR_LSI == RCAR_E3		/* E3 */
 #include "E3/pfc_init_e3.h"
 #endif
@@ -80,6 +83,9 @@ void rcar_pfc_init(void)
 	case PRR_PRODUCT_V3M:
 		pfc_init_v3m();
 		break;
+	case PRR_PRODUCT_V3H:
+		pfc_init_v3h();
+		break;
 	default:
 		PRR_PRODUCT_ERR(reg);
 		break;
@@ -125,6 +131,13 @@ void rcar_pfc_init(void)
 		pfc_init_v3m();
 #endif
 		break;
+	case PRR_PRODUCT_V3H:
+#if RCAR_LSI != RCAR_V3H
+		PRR_PRODUCT_ERR(reg);
+#else
+		pfc_init_v3h();
+#endif
+		break;
 	case PRR_PRODUCT_E3:
 #if RCAR_LSI != RCAR_E3
 		PRR_PRODUCT_ERR(reg);
diff --git a/drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c b/drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c
new file mode 100644
index 0000000..09d1dad
--- /dev/null
+++ b/drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c
@@ -0,0 +1,533 @@
+/*
+ * Copyright (c) 2015-2017, Renesas Electronics Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of Renesas nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdint.h>
+#include <common/debug.h>
+#include "../qos_common.h"
+#include "../qos_reg.h"
+#include "qos_init_v3h_v10.h"
+
+#define	RCAR_QOS_VERSION		"rev.0.14"
+
+#define	MSTAT_BASE			(0xE67E0000U)
+#define	MSTAT_FIX_QOS_BANK0		(MSTAT_BASE + 0x0000U)
+#define	MSTAT_FIX_QOS_BANK1		(MSTAT_BASE + 0x1000U)
+#define	MSTAT_BE_QOS_BANK0		(MSTAT_BASE + 0x2000U)
+#define	MSTAT_BE_QOS_BANK1		(MSTAT_BASE + 0x3000U)
+#define	MSTAT_SL_INIT			(MSTAT_BASE + 0x8000U)
+#define	MSTAT_REF_ARS			(MSTAT_BASE + 0x8004U)
+#define	MSTAT_STATQC			(MSTAT_BASE + 0x8008U)
+
+#define	RALLOC_BASE			(0xE67F0000U)
+#define	RALLOC_RAS			(RALLOC_BASE + 0x0000U)
+#define	RALLOC_FIXTH			(RALLOC_BASE + 0x0004U)
+#define	RALLOC_RAEN			(RALLOC_BASE + 0x0018U)
+#define	RALLOC_REGGD			(RALLOC_BASE + 0x0020U)
+#define	RALLOC_DANN			(RALLOC_BASE + 0x0030U)
+#define	RALLOC_DANT			(RALLOC_BASE + 0x0038U)
+#define	RALLOC_EC			(RALLOC_BASE + 0x003CU)
+#define	RALLOC_EMS			(RALLOC_BASE + 0x0040U)
+#define	RALLOC_FSS			(RALLOC_BASE + 0x0048U)
+#define	RALLOC_INSFC			(RALLOC_BASE + 0x0050U)
+#define	RALLOC_BERR			(RALLOC_BASE + 0x0054U)
+#define	RALLOC_EARLYR			(RALLOC_BASE + 0x0060U)
+#define	RALLOC_RACNT0			(RALLOC_BASE + 0x0080U)
+#define	RALLOC_STATGEN0			(RALLOC_BASE + 0x0088U)
+
+#define ACTIVE_OR			(0xFD812030U)
+
+#if RCAR_QOS_TYPE  == RCAR_QOS_TYPE_DEFAULT
+static const mstat_slot_t mstat_fix[] = {
+	{0x0000U, 0x0000000000000000U},
+	{0x0008U, 0x0000000000000000U},
+	{0x0010U, 0x0000000000000000U},
+	{0x0018U, 0x0000000000000000U},
+	{0x0020U, 0x0000000000000000U},
+	{0x0028U, 0x0000000000000000U},
+	{0x0030U, 0x001004030000FFFFU},
+	{0x0038U, 0x001008060000FFFFU},
+	{0x0040U, 0x001424120000FFFFU},
+	{0x0048U, 0x0000000000000000U},
+	{0x0050U, 0x001404010000FFFFU},
+	{0x0058U, 0x0014100F0000FFFFU},
+	{0x0060U, 0x00140C0C0000FFFFU},
+	{0x0068U, 0x0000000000000000U},
+	{0x0070U, 0x001404010000FFFFU},
+	{0x0078U, 0x001008060000FFFFU},
+	{0x0080U, 0x0000000000000000U},
+	{0x0088U, 0x001424120000FFFFU},
+	{0x0090U, 0x00140C0C0000FFFFU},
+	{0x0098U, 0x0000000000000000U},
+	{0x00A0U, 0x000C04020000FFFFU},
+	{0x00A8U, 0x000C04010000FFFFU},
+	{0x00B0U, 0x000C04010000FFFFU},
+	{0x00B8U, 0x0000000000000000U},
+	{0x00C0U, 0x000C04020000FFFFU},
+	{0x00C8U, 0x000C04010000FFFFU},
+	{0x00D0U, 0x000C04010000FFFFU},
+	{0x00D8U, 0x001020080000FFFFU},
+	{0x00E0U, 0x001008080000FFFFU},
+	{0x00E8U, 0x0000000000000000U},
+	{0x00F0U, 0x001020080000FFFFU},
+	{0x00F8U, 0x000C08060000FFFFU},
+	{0x0100U, 0x0000000000000000U},
+	{0x0108U, 0x0000000000000000U},
+	{0x0110U, 0x001008080000FFFFU},
+	{0x0118U, 0x000C100F0000FFFFU},
+	{0x0120U, 0x000C100F0000FFFFU},
+	{0x0128U, 0x0000000000000000U},
+	{0x0130U, 0x0000000000000000U},
+	{0x0138U, 0x00100C0A0000FFFFU},
+	{0x0140U, 0x00100C0A0000FFFFU},
+	{0x0148U, 0x0000000000000000U},
+	{0x0150U, 0x00100C0C0000FFFFU},
+	{0x0158U, 0x00100C0C0000FFFFU},
+	{0x0160U, 0x00100C0A0000FFFFU},
+	{0x0168U, 0x00100C0A0000FFFFU},
+	{0x0170U, 0x0000000000000000U},
+	{0x0178U, 0x001008050000FFFFU},
+	{0x0180U, 0x001008050000FFFFU},
+	{0x0188U, 0x0000000000000000U},
+	{0x0190U, 0x00102C2A0000FFFFU},
+	{0x0198U, 0x00102C2A0000FFFFU},
+	{0x01A0U, 0x00100C0A0000FFFFU},
+	{0x01A8U, 0x00100C0A0000FFFFU},
+	{0x01B0U, 0x0000000000000000U},
+	{0x01B8U, 0x0000000000000000U},
+	{0x01C0U, 0x0000000000000000U},
+	{0x01C8U, 0x0000000000000000U},
+	{0x01D0U, 0x0000000000000000U},
+	{0x01D8U, 0x0000000000000000U},
+	{0x01E0U, 0x0000000000000000U},
+	{0x01E8U, 0x0000000000000000U},
+	{0x01F0U, 0x0000000000000000U},
+	{0x01F8U, 0x0000000000000000U},
+	{0x0200U, 0x0000000000000000U},
+	{0x0208U, 0x0000000000000000U},
+	{0x0210U, 0x0000000000000000U},
+	{0x0218U, 0x0000000000000000U},
+	{0x0220U, 0x0000000000000000U},
+	{0x0228U, 0x0000000000000000U},
+	{0x0230U, 0x0000000000000000U},
+	{0x0238U, 0x0000000000000000U},
+	{0x0240U, 0x0000000000000000U},
+	{0x0248U, 0x0000000000000000U},
+	{0x0250U, 0x0000000000000000U},
+	{0x0258U, 0x0000000000000000U},
+	{0x0260U, 0x0000000000000000U},
+	{0x0268U, 0x001408010000FFFFU},
+	{0x0270U, 0x001404010000FFFFU},
+	{0x0278U, 0x0000000000000000U},
+	{0x0280U, 0x0000000000000000U},
+	{0x0288U, 0x0000000000000000U},
+	{0x0290U, 0x001408010000FFFFU},
+	{0x0298U, 0x001404010000FFFFU},
+	{0x02A0U, 0x000C04010000FFFFU},
+	{0x02A8U, 0x000C04010000FFFFU},
+	{0x02B0U, 0x001404010000FFFFU},
+	{0x02B8U, 0x0000000000000000U},
+	{0x02C0U, 0x0000000000000000U},
+	{0x02C8U, 0x0000000000000000U},
+	{0x02D0U, 0x000C04010000FFFFU},
+	{0x02D8U, 0x000C04010000FFFFU},
+	{0x02E0U, 0x001404010000FFFFU},
+	{0x02E8U, 0x0000000000000000U},
+	{0x02F0U, 0x0000000000000000U},
+	{0x02F8U, 0x0000000000000000U},
+	{0x0300U, 0x0000000000000000U},
+	{0x0308U, 0x0000000000000000U},
+	{0x0310U, 0x0000000000000000U},
+	{0x0318U, 0x0000000000000000U},
+	{0x0320U, 0x0000000000000000U},
+	{0x0328U, 0x0000000000000000U},
+	{0x0330U, 0x0000000000000000U},
+	{0x0338U, 0x0000000000000000U},
+	{0x0340U, 0x0000000000000000U},
+	{0x0348U, 0x0000000000000000U},
+	{0x0350U, 0x0000000000000000U},
+	{0x0358U, 0x0000000000000000U},
+	{0x0360U, 0x0000000000000000U},
+	{0x0368U, 0x0000000000000000U},
+};
+
+static const mstat_slot_t mstat_be[] = {
+	{0x0000U, 0x001200100C89C401U},
+	{0x0008U, 0x001200100C89C401U},
+	{0x0010U, 0x001200100C89C401U},
+	{0x0018U, 0x001200100C89C401U},
+	{0x0020U, 0x0000000000000000U},
+	{0x0028U, 0x001200100C80FC01U},
+	{0x0030U, 0x0000000000000000U},
+	{0x0038U, 0x0000000000000000U},
+	{0x0040U, 0x0000000000000000U},
+	{0x0048U, 0x0000000000000000U},
+	{0x0050U, 0x0000000000000000U},
+	{0x0058U, 0x0000000000000000U},
+	{0x0060U, 0x0000000000000000U},
+	{0x0068U, 0x0000000000000000U},
+	{0x0070U, 0x0000000000000000U},
+	{0x0078U, 0x0000000000000000U},
+	{0x0080U, 0x0000000000000000U},
+	{0x0088U, 0x0000000000000000U},
+	{0x0090U, 0x0000000000000000U},
+	{0x0098U, 0x0000000000000000U},
+	{0x00A0U, 0x0000000000000000U},
+	{0x00A8U, 0x0000000000000000U},
+	{0x00B0U, 0x0000000000000000U},
+	{0x00B8U, 0x0000000000000000U},
+	{0x00C0U, 0x0000000000000000U},
+	{0x00C8U, 0x0000000000000000U},
+	{0x00D0U, 0x0000000000000000U},
+	{0x00D8U, 0x0000000000000000U},
+	{0x00E0U, 0x0000000000000000U},
+	{0x00E8U, 0x0000000000000000U},
+	{0x00F0U, 0x0000000000000000U},
+	{0x00F8U, 0x0000000000000000U},
+	{0x0100U, 0x0000000000000000U},
+	{0x0108U, 0x0000000000000000U},
+	{0x0110U, 0x0000000000000000U},
+	{0x0118U, 0x0000000000000000U},
+	{0x0120U, 0x0000000000000000U},
+	{0x0128U, 0x0000000000000000U},
+	{0x0130U, 0x0000000000000000U},
+	{0x0138U, 0x0000000000000000U},
+	{0x0140U, 0x0000000000000000U},
+	{0x0148U, 0x0000000000000000U},
+	{0x0150U, 0x0000000000000000U},
+	{0x0158U, 0x0000000000000000U},
+	{0x0160U, 0x0000000000000000U},
+	{0x0168U, 0x0000000000000000U},
+	{0x0170U, 0x0000000000000000U},
+	{0x0178U, 0x0000000000000000U},
+	{0x0180U, 0x0000000000000000U},
+	{0x0188U, 0x0000000000000000U},
+	{0x0190U, 0x0000000000000000U},
+	{0x0198U, 0x0000000000000000U},
+	{0x01A0U, 0x0000000000000000U},
+	{0x01A8U, 0x0000000000000000U},
+	{0x01B0U, 0x0000000000000000U},
+	{0x01B8U, 0x0000000000000000U},
+	{0x01C0U, 0x001100800C8FFC01U},
+	{0x01C8U, 0x001100800C8FFC01U},
+	{0x01D0U, 0x001100800C8FFC01U},
+	{0x01D8U, 0x001100800C8FFC01U},
+	{0x01E0U, 0x0000000000000000U},
+	{0x01E8U, 0x001200100C80FC01U},
+	{0x01F0U, 0x001100100C80FC01U},
+	{0x01F8U, 0x0000000000000000U},
+	{0x0200U, 0x0000000000000000U},
+	{0x0208U, 0x001200100C80FC01U},
+	{0x0210U, 0x001100100C80FC01U},
+	{0x0218U, 0x001100100C825801U},
+	{0x0220U, 0x001100100C825801U},
+	{0x0228U, 0x0000000000000000U},
+	{0x0230U, 0x001100100C825801U},
+	{0x0238U, 0x001100100C825801U},
+	{0x0240U, 0x001200100C8BB801U},
+	{0x0248U, 0x001100200C8FFC01U},
+	{0x0250U, 0x001200100C8BB801U},
+	{0x0258U, 0x001100200C8FFC01U},
+	{0x0260U, 0x001100100C84E401U},
+	{0x0268U, 0x0000000000000000U},
+	{0x0270U, 0x0000000000000000U},
+	{0x0278U, 0x001100100C81F401U},
+	{0x0280U, 0x0000000000000000U},
+	{0x0288U, 0x0000000000000000U},
+	{0x0290U, 0x0000000000000000U},
+	{0x0298U, 0x0000000000000000U},
+	{0x02A0U, 0x0000000000000000U},
+	{0x02A8U, 0x0000000000000000U},
+	{0x02B0U, 0x0000000000000000U},
+	{0x02B8U, 0x001100100C803401U},
+	{0x02C0U, 0x0000000000000000U},
+	{0x02C8U, 0x0000000000000000U},
+	{0x02D0U, 0x0000000000000000U},
+	{0x02D8U, 0x0000000000000000U},
+	{0x02E0U, 0x0000000000000000U},
+	{0x02E8U, 0x001100100C803401U},
+	{0x02F0U, 0x001100300C8FFC01U},
+	{0x02F8U, 0x001100500C8FFC01U},
+	{0x0300U, 0x0000000000000000U},
+	{0x0308U, 0x001100300C8FFC01U},
+	{0x0310U, 0x001100500C8FFC01U},
+	{0x0318U, 0x001200100C803401U},
+	{0x0320U, 0x001100300C8FFC01U},
+	{0x0328U, 0x001100500C8FFC01U},
+	{0x0330U, 0x001100300C8FFC01U},
+	{0x0338U, 0x001100500C8FFC01U},
+	{0x0340U, 0x0000000000000000U},
+	{0x0348U, 0x0000000000000000U},
+	{0x0350U, 0x0000000000000000U},
+	{0x0358U, 0x0000000000000000U},
+	{0x0360U, 0x0000000000000000U},
+	{0x0368U, 0x0000000000000000U},
+};
+#endif
+
+static void dbsc_setting(void)
+{
+	uint32_t md=0;
+
+	/* BUFCAM settings */
+	//DBSC_DBCAM0CNF0 not set
+	io_write_32(DBSC_DBCAM0CNF1, 0x00043218U);	//dbcam0cnf1
+	io_write_32(DBSC_DBCAM0CNF2, 0x000000F4U);	//dbcam0cnf2
+	io_write_32(DBSC_DBCAM0CNF3, 0x00000000U);	//dbcam0cnf3
+	io_write_32(DBSC_DBSCHCNT0,  0x000F0037U);	//dbschcnt0
+	//DBSC_DBSCHCNT1 not set
+	io_write_32(DBSC_DBSCHSZ0,   0x00000001U);	//dbschsz0
+	io_write_32(DBSC_DBSCHRW0,   0x22421111U);	//dbschrw0
+	io_write_32(DBSC_DBSCHRW1,   0x00000034U);	//dbschrw1
+
+	md = (*((volatile uint32_t*)RST_MODEMR) & 0x000A0000) >> 17;
+
+	switch (md) {
+	case 0x0:
+		/* DDR3200 */
+		io_write_32(DBSC_SCFCTST2, 0x012F1123U);
+		break;
+	case 0x1:	//MD19=0,MD17=1 : LPDDR4-3000, 4GByte(1GByte x4)
+		/* DDR2800 */
+		io_write_32(DBSC_SCFCTST2, 0x012F1123U);
+		break;
+	case 0x4:	//MD19=1,MD17=0 : LPDDR4-2400, 4GByte(1GByte x4)
+		/* DDR2400 */
+		io_write_32(DBSC_SCFCTST2, 0x012F1123U);
+		break;
+	default:	//MD19=1,MD17=1 : LPDDR4-1600, 4GByte(1GByte x4)
+		/* DDR1600 */
+		io_write_32(DBSC_SCFCTST2, 0x012F1123U);
+		break;
+	}
+
+	/* QoS Settings */
+	io_write_32(DBSC_DBSCHQOS00,  0x00000F00U);
+	io_write_32(DBSC_DBSCHQOS01,  0x00000B00U);
+	io_write_32(DBSC_DBSCHQOS02,  0x00000000U);
+	io_write_32(DBSC_DBSCHQOS03,  0x00000000U);
+	//DBSC_DBSCHQOS10 not set
+	//DBSC_DBSCHQOS11 not set
+	//DBSC_DBSCHQOS12 not set
+	//DBSC_DBSCHQOS13 not set
+	//DBSC_DBSCHQOS20 not set
+	//DBSC_DBSCHQOS21 not set
+	//DBSC_DBSCHQOS22 not set
+	//DBSC_DBSCHQOS23 not set
+	//DBSC_DBSCHQOS30 not set
+	//DBSC_DBSCHQOS31 not set
+	//DBSC_DBSCHQOS32 not set
+	//DBSC_DBSCHQOS33 not set
+	io_write_32(DBSC_DBSCHQOS40,  0x00000300U);
+	io_write_32(DBSC_DBSCHQOS41,  0x000002F0U);
+	io_write_32(DBSC_DBSCHQOS42,  0x00000200U);
+	io_write_32(DBSC_DBSCHQOS43,  0x00000100U);
+	//DBSC_DBSCHQOS50 not set
+	//DBSC_DBSCHQOS51 not set
+	//DBSC_DBSCHQOS52 not set
+	//DBSC_DBSCHQOS53 not set
+	//DBSC_DBSCHQOS60 not set
+	//DBSC_DBSCHQOS61 not set
+	//DBSC_DBSCHQOS62 not set
+	//DBSC_DBSCHQOS63 not set
+	//DBSC_DBSCHQOS70 not set
+	//DBSC_DBSCHQOS71 not set
+	//DBSC_DBSCHQOS72 not set
+	//DBSC_DBSCHQOS73 not set
+	//DBSC_DBSCHQOS80 not set
+	//DBSC_DBSCHQOS81 not set
+	//DBSC_DBSCHQOS82 not set
+	//DBSC_DBSCHQOS83 not set
+	io_write_32(DBSC_DBSCHQOS90,  0x00000300U);
+	io_write_32(DBSC_DBSCHQOS91,  0x000002F0U);
+	io_write_32(DBSC_DBSCHQOS92,  0x00000200U);
+	io_write_32(DBSC_DBSCHQOS93,  0x00000100U);
+	//DBSC_DBSCHQOS100 not set
+	//DBSC_DBSCHQOS101 not set
+	//DBSC_DBSCHQOS102 not set
+	//DBSC_DBSCHQOS103 not set
+	//DBSC_DBSCHQOS110 not set
+	//DBSC_DBSCHQOS111 not set
+	//DBSC_DBSCHQOS112 not set
+	//DBSC_DBSCHQOS113 not set
+	io_write_32(DBSC_DBSCHQOS120, 0x00000040U);
+	io_write_32(DBSC_DBSCHQOS121, 0x00000030U);
+	io_write_32(DBSC_DBSCHQOS122, 0x00000020U);
+	io_write_32(DBSC_DBSCHQOS123, 0x00000010U);
+	io_write_32(DBSC_DBSCHQOS130, 0x00000100U);
+	io_write_32(DBSC_DBSCHQOS131, 0x000000F0U);
+	io_write_32(DBSC_DBSCHQOS132, 0x000000A0U);
+	io_write_32(DBSC_DBSCHQOS133, 0x00000040U);
+	io_write_32(DBSC_DBSCHQOS140, 0x000000C0U);
+	io_write_32(DBSC_DBSCHQOS141, 0x000000B0U);
+	io_write_32(DBSC_DBSCHQOS142, 0x00000080U);
+	io_write_32(DBSC_DBSCHQOS143, 0x00000040U);
+	io_write_32(DBSC_DBSCHQOS150, 0x00000040U);
+	io_write_32(DBSC_DBSCHQOS151, 0x00000030U);
+	io_write_32(DBSC_DBSCHQOS152, 0x00000020U);
+	io_write_32(DBSC_DBSCHQOS153, 0x00000010U);
+}
+
+void qos_init_v3h_v10(void)
+{
+	/* this setting value is H3 *
+	 * Respond by updating in the future */
+	dbsc_setting();
+
+	/* DRAM Split Address mapping */
+#if (RCAR_DRAM_SPLIT == RCAR_DRAM_SPLIT_4CH) || \
+    (RCAR_DRAM_SPLIT == RCAR_DRAM_SPLIT_AUTO)
+	NOTICE("BL2: DRAM Split is 4ch\n");
+	io_write_32(AXI_ADSPLCR0, ADSPLCR0_ADRMODE_DEFAULT
+				  | ADSPLCR0_SPLITSEL(0xFFU)
+				  | ADSPLCR0_AREA(0x1BU)
+				  | ADSPLCR0_SWP);
+	io_write_32(AXI_ADSPLCR1, 0x00000000U);
+	io_write_32(AXI_ADSPLCR2, 0xA8A90000U);
+	io_write_32(AXI_ADSPLCR3, 0x00000000U);
+#elif RCAR_DRAM_SPLIT == RCAR_DRAM_SPLIT_2CH
+	NOTICE("BL2: DRAM Split is 2ch\n");
+	io_write_32(AXI_ADSPLCR0, 0x00000000U);
+	io_write_32(AXI_ADSPLCR1, ADSPLCR0_ADRMODE_DEFAULT
+				  | ADSPLCR0_SPLITSEL(0xFFU)
+				  | ADSPLCR0_AREA(0x1BU)
+				  | ADSPLCR0_SWP);
+	io_write_32(AXI_ADSPLCR2, 0x00000000U);
+	io_write_32(AXI_ADSPLCR3, 0x00000000U);
+#else
+	NOTICE("BL2: DRAM Split is OFF\n");
+#endif
+
+#if !(RCAR_QOS_TYPE == RCAR_QOS_NONE)
+#if RCAR_QOS_TYPE  == RCAR_QOS_TYPE_DEFAULT
+	NOTICE("BL2: QoS is default setting(%s)\n", RCAR_QOS_VERSION);
+#endif
+
+	/* Resource Alloc setting */
+	io_write_32(RALLOC_RAS,   0x00000044U);
+	io_write_32(RALLOC_FIXTH, 0x000F0005U);
+	io_write_32(RALLOC_REGGD, 0x00000000U);
+	io_write_64(RALLOC_DANN,  0x0404010002020201U);
+	io_write_32(RALLOC_DANT,  0x0020100AU);
+	io_write_32(RALLOC_EC,    0x00000000U);
+	io_write_64(RALLOC_EMS,   0x0000000000000000U);
+	io_write_32(RALLOC_FSS,   0x000003e8U);
+	io_write_32(RALLOC_INSFC, 0xC7840001U);
+	io_write_32(RALLOC_BERR,  0x00000000U);
+	io_write_32(RALLOC_EARLYR, 0x00000000U);
+	io_write_32(RALLOC_RACNT0, 0x00010003U);
+
+	/* GPU Boost Mode */
+	io_write_32(RALLOC_STATGEN0, 0x00000001U);
+	io_write_32(ACTIVE_OR,       0x00000000U); /* 0:enable, 1:disable */
+
+	/* MSTAT setting */
+	io_write_32(MSTAT_SL_INIT, 0x0305007DU);
+	io_write_32(MSTAT_REF_ARS, 0x00330000U);
+
+	/* MSTAT SRAM setting */
+	{
+	uint32_t i;
+
+	for (i = 0U; i < ARRAY_SIZE(mstat_fix); i++) {
+		io_write_64(MSTAT_FIX_QOS_BANK0 + mstat_fix[i].addr,
+				mstat_fix[i].value);
+		io_write_64(MSTAT_FIX_QOS_BANK1 + mstat_fix[i].addr,
+				mstat_fix[i].value);
+	}
+	for (i = 0U; i < ARRAY_SIZE(mstat_be); i++) {
+		io_write_64(MSTAT_BE_QOS_BANK0 + mstat_be[i].addr,
+				mstat_be[i].value);
+		io_write_64(MSTAT_BE_QOS_BANK1 + mstat_be[i].addr,
+				mstat_be[i].value);
+	}
+	}
+
+	/* AXI-IF arbitration setting */
+	io_write_32(DBSC_AXARB, 0x00000000U);
+
+	/* 3DG bus Leaf setting */
+	io_write_32(0xFD820800U, 0x00000000U);
+	io_write_32(0xFD821800U, 0x00000000U);
+	io_write_32(0xFD822800U, 0x00000000U);
+	io_write_32(0xFD823800U, 0x00000000U);
+	io_write_32(0xFD824800U, 0x00000000U);
+	io_write_32(0xFD825800U, 0x00000000U);
+	io_write_32(0xFD826800U, 0x00000000U);
+	io_write_32(0xFD827800U, 0x00000000U);
+
+	/* VIO bus Leaf setting */
+	io_write_32(0xFEB89800, 0x00000000U);
+	io_write_32(0xFEB8A800, 0x00000000U);
+	io_write_32(0xFEB8B800, 0x00000000U);
+	io_write_32(0xFEB8C800, 0x00000000U);
+
+	/* HSC bus Leaf setting */
+	io_write_32(0xE6430800, 0x00000000U);
+	io_write_32(0xE6431800, 0x00000000U);
+	io_write_32(0xE6432800, 0x00000000U);
+	io_write_32(0xE6433800, 0x00000000U);
+
+	/* MP bus Leaf setting */
+	io_write_32(0xEC620800, 0x00000000U);
+	io_write_32(0xEC621800, 0x00000000U);
+
+	/* PERIE bus Leaf setting */
+	io_write_32(0xE7760800, 0x00000000U);
+	io_write_32(0xE7768800, 0x00000000U);
+
+	/* PERIW bus Leaf setting */
+	io_write_32(0xE6760800, 0x00000000U);
+	io_write_32(0xE6768800, 0x00000000U);
+
+	/* RT bus Leaf setting */
+	io_write_32(0xFFC50800U, 0x00000000U);
+	io_write_32(0xFFC51800U, 0x00000000U);
+
+	/* CCI bus Leaf setting */
+	io_write_32(0xF1300800, 0x00000003U);
+	io_write_32(0xF1340800, 0x00000003U);
+	io_write_32(0xF1380800, 0x00000003U);
+	io_write_32(0xF13C0800, 0x00000003U);
+
+	/* Resource Alloc start */
+	io_write_32(RALLOC_RAEN,  0x00000001U);
+
+	/* MSTAT start */
+	io_write_32(MSTAT_STATQC, 0x00000001U);
+#else
+	NOTICE("BL2: QoS is None\n");
+
+	/* Resource Alloc setting */
+	io_write_32(RALLOC_EC,    0x00000000U);
+	/* Resource Alloc start */
+	io_write_32(RALLOC_RAEN,  0x00000001U);
+#endif /* !(RCAR_QOS_TYPE == RCAR_QOS_NONE) */
+}
diff --git a/drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.h b/drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.h
new file mode 100644
index 0000000..893d46f
--- /dev/null
+++ b/drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2015-2017, Renesas Electronics Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of Renesas nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef QOS_INIT_H_H3_V20__
+#define QOS_INIT_H_H3_V20__
+
+void qos_init_v3h_v10(void);
+
+#endif	/* QOS_INIT_H_H3_V20__ */
diff --git a/drivers/renesas/rcar/qos/qos.mk b/drivers/renesas/rcar/qos/qos.mk
index da10da2..89711cd 100644
--- a/drivers/renesas/rcar/qos/qos.mk
+++ b/drivers/renesas/rcar/qos/qos.mk
@@ -15,6 +15,7 @@ ifeq (${RCAR_LSI},${RCAR_AUTO})
     BL2_SOURCES += drivers/renesas/rcar/qos/M3/qos_init_m3_v30.c
     BL2_SOURCES += drivers/renesas/rcar/qos/M3N/qos_init_m3n_v10.c
     BL2_SOURCES += drivers/renesas/rcar/qos/V3M/qos_init_v3m.c
+    BL2_SOURCES += drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c
 else ifdef RCAR_LSI_CUT_COMPAT
   ifeq (${RCAR_LSI},${RCAR_H3})
     BL2_SOURCES += drivers/renesas/rcar/qos/H3/qos_init_h3_v10.c
@@ -36,6 +37,9 @@ else ifdef RCAR_LSI_CUT_COMPAT
   ifeq (${RCAR_LSI},${RCAR_V3M})
     BL2_SOURCES += drivers/renesas/rcar/qos/V3M/qos_init_v3m.c
   endif
+  ifeq (${RCAR_LSI},${RCAR_V3H})
+    BL2_SOURCES += drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c
+  endif
   ifeq (${RCAR_LSI},${RCAR_E3})
     BL2_SOURCES += drivers/renesas/rcar/qos/E3/qos_init_e3_v10.c
   endif
@@ -90,6 +94,9 @@ else
   ifeq (${RCAR_LSI},${RCAR_V3M})
     BL2_SOURCES += drivers/renesas/rcar/qos/V3M/qos_init_v3m.c
   endif
+  ifeq (${RCAR_LSI},${RCAR_V3H})
+    BL2_SOURCES += drivers/renesas/rcar/qos/V3H/qos_init_v3h_v10.c
+  endif
   ifeq (${RCAR_LSI},${RCAR_E3})
     ifeq (${LSI_CUT},10)
      BL2_SOURCES += drivers/renesas/rcar/qos/E3/qos_init_e3_v10.c
diff --git a/drivers/renesas/rcar/qos/qos_init.c b/drivers/renesas/rcar/qos/qos_init.c
index d0f1730..0171dbb 100644
--- a/drivers/renesas/rcar/qos/qos_init.c
+++ b/drivers/renesas/rcar/qos/qos_init.c
@@ -23,6 +23,7 @@
 #include "M3/qos_init_m3_v30.h"
 #include "M3N/qos_init_m3n_v10.h"
 #include "V3M/qos_init_v3m.h"
+#include "V3H/qos_init_v3h_v10.h"
 #endif
 #if RCAR_LSI == RCAR_H3		/* H3 */
 #include "H3/qos_init_h3_v10.h"
@@ -44,6 +45,9 @@
 #if RCAR_LSI == RCAR_V3M	/* V3M */
 #include "V3M/qos_init_v3m.h"
 #endif
+#if RCAR_LSI == RCAR_V3H	/* V3H */
+#include "V3H/qos_init_v3h_v10.h"
+#endif
 #if RCAR_LSI == RCAR_E3		/* E3 */
 #include "E3/qos_init_e3_v10.h"
 #endif
@@ -161,6 +165,19 @@ void rcar_qos_init(void)
 		PRR_PRODUCT_ERR(reg);
 #endif
 		break;
+	case PRR_PRODUCT_V3H:
+#if (RCAR_LSI == RCAR_AUTO) || (RCAR_LSI == RCAR_V3H)
+		switch (reg & PRR_CUT_MASK) {
+		case PRR_PRODUCT_10:
+		case PRR_PRODUCT_20:
+		default:
+			qos_init_v3h_v10();
+			break;
+		}
+#else
+		PRR_PRODUCT_ERR(reg);
+#endif
+		break;
 	case PRR_PRODUCT_E3:
 #if (RCAR_LSI == RCAR_E3)
 		switch (reg & PRR_CUT_MASK) {
@@ -271,6 +288,13 @@ void rcar_qos_init(void)
 		PRR_PRODUCT_ERR(reg);
 	}
 	qos_init_v3m();
+#elif RCAR_LSI == RCAR_V3H	/* V3H */
+	/* V3H Cut 10 or later */
+	if ((PRR_PRODUCT_V3H)
+			!= (reg & (PRR_PRODUCT_MASK))) {
+		PRR_PRODUCT_ERR(reg);
+	}
+	qos_init_v3h_v10();
 #elif RCAR_LSI == RCAR_D3	/* D3 */
 	/* D3 Cut 10 or later */
 	if ((PRR_PRODUCT_D3)
diff --git a/plat/renesas/common/bl2_cpg_init.c b/plat/renesas/common/bl2_cpg_init.c
index a6579eb..ba80cad 100644
--- a/plat/renesas/common/bl2_cpg_init.c
+++ b/plat/renesas/common/bl2_cpg_init.c
@@ -34,6 +34,11 @@ static void bl2_realtime_cpg_init_v3m(void);
 static void bl2_system_cpg_init_v3m(void);
 #endif
 
+#if (RCAR_LSI == RCAR_AUTO) || (RCAR_LSI == RCAR_V3H)
+static void bl2_realtime_cpg_init_v3h(void);
+static void bl2_system_cpg_init_v3h(void);
+#endif
+
 #if (RCAR_LSI == RCAR_AUTO) || (RCAR_LSI == RCAR_E3) || (RCAR_LSI == RZ_G2E)
 static void bl2_realtime_cpg_init_e3(void);
 static void bl2_system_cpg_init_e3(void);
@@ -254,6 +259,60 @@ static void bl2_system_cpg_init_v3m(void)
 }
 #endif
 
+#if (RCAR_LSI == RCAR_AUTO) || (RCAR_LSI == RCAR_V3H)
+static void bl2_realtime_cpg_init_v3h(void)
+{
+	/* CPG (REALTIME) registers */
+
+	/* Realtime Module Stop Control Register 0 */
+	cpg_write(RMSTPCR0,	0x00230000U);
+	/* Realtime Module Stop Control Register 1 */
+	cpg_write(RMSTPCR1,	0xFFFFFFFFU);
+	/* Realtime Module Stop Control Register 2 */
+	cpg_write(RMSTPCR2,	0x14062FD8U);
+	/* Realtime Module Stop Control Register 3 */
+	cpg_write(RMSTPCR3,	0xFFFFFFDFU);
+	/* Realtime Module Stop Control Register 4 */
+	cpg_write(RMSTPCR4,	0x80000184U);
+	/* Realtime Module Stop Control Register 5 */
+	cpg_write(RMSTPCR5,	0x83FFFFFFU);
+	/* Realtime Module Stop Control Register 6 */
+	cpg_write(RMSTPCR6,	0xFFFFFFFFU);
+	/* Realtime Module Stop Control Register 7 */
+	cpg_write(RMSTPCR7,	0xFFFFFFFFU);
+	/* Realtime Module Stop Control Register 8 */
+	cpg_write(RMSTPCR8,	0x7FF3FFF4U);
+	/* Realtime Module Stop Control Register 9 */
+	cpg_write(RMSTPCR9,	0xFFFFFFFEU);
+}
+
+static void bl2_system_cpg_init_v3h(void)
+{
+	/* CPG (SYSTEM) registers */
+
+	/* System Module Stop Control Register 0 */
+	cpg_write(SMSTPCR0,	0x00210000U);
+	/* System Module Stop Control Register 1 */
+	cpg_write(SMSTPCR1,	0xFFFFFFFFU);
+	/* System Module Stop Control Register 2 */
+	cpg_write(SMSTPCR2,	0x340E2FDCU);
+	/* System Module Stop Control Register 3 */
+	cpg_write(SMSTPCR3,	0xFFFFFBDFU);
+	/* System Module Stop Control Register 4 */
+	cpg_write(SMSTPCR4,	0x80000004U);
+	/* System Module Stop Control Register 5 */
+	cpg_write(SMSTPCR5,	0xC3FFFFFFU);
+	/* System Module Stop Control Register 6 */
+	cpg_write(SMSTPCR6,	0xFFFFFFFFU);
+	/* System Module Stop Control Register 7 */
+	cpg_write(SMSTPCR7,	0xFFFFFFFFU);
+	/* System Module Stop Control Register 8 */
+	cpg_write(SMSTPCR8,	0x01F1FFF5U);
+	/* System Module Stop Control Register 9 */
+	cpg_write(SMSTPCR9,	0xFFFFFFFEU);
+}
+#endif
+
 #if (RCAR_LSI == RCAR_AUTO) || (RCAR_LSI == RCAR_E3) || (RCAR_LSI == RZ_G2E)
 static void bl2_realtime_cpg_init_e3(void)
 {
@@ -334,6 +393,9 @@ void bl2_cpg_init(void)
 		case PRR_PRODUCT_V3M:
 			bl2_realtime_cpg_init_v3m();
 			break;
+		case PRR_PRODUCT_V3H:
+			bl2_realtime_cpg_init_v3h();
+			break;
 		case PRR_PRODUCT_E3:
 			bl2_realtime_cpg_init_e3();
 			break;
@@ -352,6 +414,8 @@ void bl2_cpg_init(void)
 		bl2_realtime_cpg_init_m3n();
 #elif RCAR_LSI == RCAR_V3M
 		bl2_realtime_cpg_init_v3m();
+#elif RCAR_LSI == RCAR_V3H
+		bl2_realtime_cpg_init_v3h();
 #elif RCAR_LSI == RCAR_E3 || RCAR_LSI == RZ_G2E
 		bl2_realtime_cpg_init_e3();
 #elif RCAR_LSI == RCAR_D3
@@ -380,6 +444,9 @@ void bl2_system_cpg_init(void)
 	case PRR_PRODUCT_V3M:
 		bl2_system_cpg_init_v3m();
 		break;
+	case PRR_PRODUCT_V3H:
+		bl2_system_cpg_init_v3h();
+		break;
 	case PRR_PRODUCT_E3:
 		bl2_system_cpg_init_e3();
 		break;
@@ -398,6 +465,8 @@ void bl2_system_cpg_init(void)
 	bl2_system_cpg_init_m3n();
 #elif RCAR_LSI == RCAR_V3M
 	bl2_system_cpg_init_v3m();
+#elif RCAR_LSI == RCAR_V3H
+	bl2_system_cpg_init_v3h();
 #elif RCAR_LSI == RCAR_E3 || RCAR_LSI == RZ_G2E
 	bl2_system_cpg_init_e3();
 #elif RCAR_LSI == RCAR_D3
diff --git a/plat/renesas/common/common.mk b/plat/renesas/common/common.mk
index 6a52d00..1ee34f9 100644
--- a/plat/renesas/common/common.mk
+++ b/plat/renesas/common/common.mk
@@ -32,6 +32,7 @@ RCAR_E3:=3
 RCAR_H3N:=4
 RCAR_D3:=5
 RCAR_V3M:=6
+RCAR_V3H:=7
 RCAR_AUTO:=99
 RZ_G2M:=100
 RZ_G2H:=101
@@ -44,6 +45,7 @@ $(eval $(call add_define,RCAR_E3))
 $(eval $(call add_define,RCAR_H3N))
 $(eval $(call add_define,RCAR_D3))
 $(eval $(call add_define,RCAR_V3M))
+$(eval $(call add_define,RCAR_V3H))
 $(eval $(call add_define,RCAR_AUTO))
 $(eval $(call add_define,RZ_G2M))
 $(eval $(call add_define,RZ_G2H))
diff --git a/plat/renesas/common/include/platform_def.h b/plat/renesas/common/include/platform_def.h
index fb92be8..f6eaea5 100644
--- a/plat/renesas/common/include/platform_def.h
+++ b/plat/renesas/common/include/platform_def.h
@@ -105,20 +105,18 @@
  * size plus a little space for growth.
  */
 #define RCAR_SYSRAM_BASE		U(0xE6300000)
-#if (RCAR_LSI == RCAR_E3) || (RCAR_LSI == RCAR_D3)
-#define BL2_LIMIT			U(0xE6320000)
-#else
-#define BL2_LIMIT			U(0xE6360000)
-#endif
 
 #if (RCAR_LSI == RCAR_E3) || (RCAR_LSI == RCAR_D3)
 #define BL2_BASE			U(0xE6304000)
+#define BL2_LIMIT			U(0xE6320000)
 #define BL2_IMAGE_LIMIT			U(0xE6318000)
 #elif (RCAR_LSI == RCAR_V3M)
 #define BL2_BASE			U(0xE6344000)
+#define BL2_LIMIT			U(0xE6360000)
 #define BL2_IMAGE_LIMIT			U(0xE636E800)
 #else
 #define BL2_BASE			U(0xE6304000)
+#define BL2_LIMIT			U(0xE6360000)
 #define BL2_IMAGE_LIMIT			U(0xE632E800)
 #endif
 #define RCAR_SYSRAM_SIZE		(BL2_BASE - RCAR_SYSRAM_BASE)
diff --git a/plat/renesas/rcar/bl2_plat_setup.c b/plat/renesas/rcar/bl2_plat_setup.c
index bf077c4..bd10857 100644
--- a/plat/renesas/rcar/bl2_plat_setup.c
+++ b/plat/renesas/rcar/bl2_plat_setup.c
@@ -83,6 +83,9 @@ static void bl2_init_generic_timer(void);
 #elif RCAR_LSI == RCAR_V3M
 #define TARGET_PRODUCT			PRR_PRODUCT_V3M
 #define TARGET_NAME			"R-Car V3M"
+#elif RCAR_LSI == RCAR_V3H
+#define TARGET_PRODUCT			PRR_PRODUCT_V3H
+#define TARGET_NAME			"R-Car V3H"
 #elif RCAR_LSI == RCAR_E3
 #define TARGET_PRODUCT			PRR_PRODUCT_E3
 #define TARGET_NAME			"R-Car E3"
@@ -90,7 +93,7 @@ static void bl2_init_generic_timer(void);
 #define TARGET_PRODUCT			PRR_PRODUCT_D3
 #define TARGET_NAME			"R-Car D3"
 #elif RCAR_LSI == RCAR_AUTO
-#define TARGET_NAME			"R-Car H3/M3/M3N/V3M"
+#define TARGET_NAME			"R-Car H3/M3/M3N/V3M/V3H"
 #endif
 
 #if (RCAR_LSI == RCAR_E3)
@@ -479,6 +482,10 @@ static void bl2_populate_compatible_string(void *dt)
 		ret = fdt_setprop_string(dt, 0, "compatible",
 					 "renesas,eagle");
 		break;
+	case BOARD_CONDOR:
+		ret = fdt_setprop_string(dt, 0, "compatible",
+					 "renesas,condor");
+		break;
 	case BOARD_EBISU:
 	case BOARD_EBISU_4D:
 		ret = fdt_setprop_string(dt, 0, "compatible",
@@ -516,6 +523,10 @@ static void bl2_populate_compatible_string(void *dt)
 		ret = fdt_appendprop_string(dt, 0, "compatible",
 					    "renesas,r8a77970");
 		break;
+	case PRR_PRODUCT_V3H:
+		ret = fdt_appendprop_string(dt, 0, "compatible",
+					    "renesas,r8a77980");
+		break;
 	case PRR_PRODUCT_E3:
 		ret = fdt_appendprop_string(dt, 0, "compatible",
 					    "renesas,r8a77990");
@@ -703,6 +714,11 @@ static void bl2_advertise_dram_size(uint32_t product)
 		dram_config[1] = 0x40000000ULL;
 		break;
 
+	case PRR_PRODUCT_V3H:
+		/* 2GB(512MBx4) */
+		dram_config[1] = 0x80000000ULL;
+		break;
+
 	case PRR_PRODUCT_E3:
 #if (RCAR_DRAM_DDR3L_MEMCONF == 0)
 		/* 1GB(512MBx2) */
@@ -741,6 +757,7 @@ void bl2_el3_early_platform_setup(u_register_t arg1, u_register_t arg2,
 	const char *product_e3 = "E3";
 	const char *product_d3 = "D3";
 	const char *product_v3m = "V3M";
+	const char *product_v3h = "V3H";
 	const char *lcs_secure = "SE";
 	const char *lcs_cm = "CM";
 	const char *lcs_dm = "DM";
@@ -819,6 +836,9 @@ void bl2_el3_early_platform_setup(u_register_t arg1, u_register_t arg2,
 	case PRR_PRODUCT_V3M:
 		str = product_v3m;
 		break;
+	case PRR_PRODUCT_V3H:
+		str = product_v3h;
+		break;
 	case PRR_PRODUCT_E3:
 		str = product_e3;
 		break;
@@ -875,6 +895,7 @@ void bl2_el3_early_platform_setup(u_register_t arg1, u_register_t arg2,
 	case BOARD_EBISU_4D:
 	case BOARD_DRAAK:
 	case BOARD_EAGLE:
+	case BOARD_CONDOR:
 		break;
 	default:
 		type = BOARD_UNKNOWN;
diff --git a/plat/renesas/rcar/platform.mk b/plat/renesas/rcar/platform.mk
index 7c90b8a..b065ea5 100644
--- a/plat/renesas/rcar/platform.mk
+++ b/plat/renesas/rcar/platform.mk
@@ -135,6 +135,22 @@ else
       endif
       $(eval $(call add_define,RCAR_LSI_CUT))
     endif
+  else ifeq (${LSI},V3H)
+    RCAR_LSI:=${RCAR_V3H}
+    ifndef LSI_CUT
+      # enable compatible function.
+      RCAR_LSI_CUT_COMPAT := 1
+      $(eval $(call add_define,RCAR_LSI_CUT_COMPAT))
+    else
+      # disable compatible function.
+      ifeq (${LSI_CUT},10)
+        RCAR_LSI_CUT:=0
+      endif
+      ifeq (${LSI_CUT},20)
+        RCAR_LSI_CUT:=10
+      endif
+      $(eval $(call add_define,RCAR_LSI_CUT))
+    endif
   else
     $(error "Error: ${LSI} is not supported.")
   endif
diff --git a/tools/renesas/rcar_layout_create/makefile b/tools/renesas/rcar_layout_create/makefile
index 4bfea7d..8bef2c7 100644
--- a/tools/renesas/rcar_layout_create/makefile
+++ b/tools/renesas/rcar_layout_create/makefile
@@ -59,8 +59,12 @@ $(eval $(call add_define,RCAR_SA6_TYPE))
 ifeq (${RCAR_LSI},${RCAR_D3})
 RCAR_VMA_ADJUST_ADDR := 0xE6320000
 else
+ifeq (${RCAR_LSI},V3H)
+RCAR_VMA_ADJUST_ADDR := 0xEB220000
+else
 RCAR_VMA_ADJUST_ADDR := 0xE6312000
 endif
+endif
 $(eval $(call add_define,RCAR_VMA_ADJUST_ADDR))
 
 
-- 
2.7.4

