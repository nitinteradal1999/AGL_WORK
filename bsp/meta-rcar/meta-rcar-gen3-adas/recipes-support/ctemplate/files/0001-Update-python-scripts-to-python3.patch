From 23bab8ccdbcd2b3c4973e024bc7a5405859941cd Mon Sep 17 00:00:00 2001
From: Valentine Barshak <valentine.barshak@cogentembedded.com>
Date: Wed, 12 Jan 2022 01:49:11 +0300
Subject: [PATCH] Update python scripts to python3

This updates python scripts for python3.

Signed-off-by: Valentine Barshak <valentine.barshak@cogentembedded.com>
---
 src/htmlparser/fsm_config.py   |  4 ++--
 src/htmlparser/generate_fsm.py | 12 ++++++------
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/htmlparser/fsm_config.py b/src/htmlparser/fsm_config.py
index ff27c89..7f99b87 100755
--- a/src/htmlparser/fsm_config.py
+++ b/src/htmlparser/fsm_config.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 #
 # Copyright (c) 2008, Google Inc.
 # All rights reserved.
@@ -210,7 +210,7 @@ class FSMConfig(object):
 
     self.sm['state'] = self.AddState
     self.sm['condition'] = self.AddCondition
-    execfile(filename, self.sm)
+    exec(compile(open(filename, "rb").read(), filename, 'exec'), self.sm)
     self.name = self.sm['name']
     if not self.name.isalnum():
       raise Exception("State machine name must consist of only alphanumeric"
diff --git a/src/htmlparser/generate_fsm.py b/src/htmlparser/generate_fsm.py
index 9106b96..1ac0618 100755
--- a/src/htmlparser/generate_fsm.py
+++ b/src/htmlparser/generate_fsm.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 #
 # Copyright (c) 2008, Google Inc.
 # All rights reserved.
@@ -264,7 +264,7 @@ class FSMGenerateC(FSMGenerateAbstract):
     state_table = {}
 
     for state in self._config.states:
-      state_table[state] = [default_state for col in xrange(255)]
+      state_table[state] = [default_state for col in iter(range(255))]
 
     # We process the transition in reverse order while updating the table.
     for i_transition in range(len(self._config.transitions) - 1, -1, -1):
@@ -281,7 +281,7 @@ class FSMGenerateC(FSMGenerateAbstract):
     # Create the inner lists which map input characters to destination states.
     for state in self._config.states:
       transition_row = []
-      for c in xrange(0, 255):
+      for c in iter(range(0, 255)):
         transition_row.append('    /* %06s */ %s' % (repr(chr(c)),
                                                      state_table[state][c]))
 
@@ -306,17 +306,17 @@ class FSMGenerateC(FSMGenerateAbstract):
   def Generate(self):
     """Returns the generated the C include statements for the statemachine."""
 
-    print '\n'.join((self._CreateHeader(),
+    print ('\n'.join((self._CreateHeader(),
                      self._CreateNumStates(),
                      self._CreateStatesEnum(),
                      self._CreateStatesExternal(),
                      self._CreateStatesInternalNames(),
-                     self._CreateTransitionTable()))
+                     self._CreateTransitionTable())))
 
 
 def main():
   if len(sys.argv) != 2:
-    print "usage: generate_fsm.py config_file"
+    print("usage: generate_fsm.py config_file")
     sys.exit(1)
 
   config = FSMConfig()
-- 
2.7.4

