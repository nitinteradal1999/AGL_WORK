From f336d32fe7a6236ef2912a026eef8a5962a56c6b Mon Sep 17 00:00:00 2001
From: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
Date: Mon, 18 May 2020 15:08:30 +0300
Subject: [PATCH 02/76] ASoC: Modify check condition of multiple bindings of
 components

https://patchwork.kernel.org/patch/7385501/
...and some more hacks to bind one component (with several DAIs)
to more than one sound card.

KF has 4 sound cards (pcm3168a, ak4613, radio, wl18xx) and just one
compinent ec500000.sound that can not be bound to all 4 cards.
This is a lack of current implementation of sound/soc/sh/rcar/* ASoC stack
The ec500000.sound resources (PCM/DMA, dais) needs to be shared between
all 4 sound cards if we want all cards work runtime.
Or we have to enable only one of them in dts file as it is designed.

Signed-off-by: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
---
 include/sound/soc-component.h | 1 +
 sound/soc/soc-core.c          | 9 ++++++---
 2 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/include/sound/soc-component.h b/include/sound/soc-component.h
index 5fbbcdf..65094c0 100644
--- a/include/sound/soc-component.h
+++ b/include/sound/soc-component.h
@@ -188,6 +188,7 @@ struct snd_soc_component {
 
 	unsigned int active;
 
+	unsigned int registered_as_component:1;
 	unsigned int suspended:1; /* is in suspend PM state */
 
 	struct list_head list;
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index bf65cba..6b95df8 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -1175,7 +1175,8 @@ static int soc_probe_component(struct snd_soc_card *card,
 		return 0;
 
 	if (component->card) {
-		if (component->card != card) {
+		if (component->card != card &&
+		    component->registered_as_component) {
 			dev_err(component->dev,
 				"Trying to bind component to card \"%s\" but is already bound to card \"%s\"\n",
 				card->name, component->card->name);
@@ -2476,6 +2477,8 @@ int snd_soc_add_component(struct snd_soc_component *component,
 
 	mutex_lock(&client_mutex);
 
+	component->registered_as_component = num_dai == 1;
+
 	if (component->driver->endianness) {
 		for (i = 0; i < num_dai; i++) {
 			convert_endianness_formats(&dai_drv[i].playback);
@@ -2551,7 +2554,7 @@ void snd_soc_unregister_component_by_driver(struct device *dev,
 
 	mutex_lock(&client_mutex);
 	component = snd_soc_lookup_component_nolocked(dev, component_driver->name);
-	if (!component)
+	if (!component || !component->registered_as_component)
 		goto out;
 
 	snd_soc_del_component_unlocked(component);
@@ -2574,7 +2577,7 @@ void snd_soc_unregister_component(struct device *dev)
 	mutex_lock(&client_mutex);
 	while (1) {
 		component = snd_soc_lookup_component_nolocked(dev, NULL);
-		if (!component)
+		if (!component || !component->registered_as_component)
 			break;
 
 		snd_soc_del_component_unlocked(component);
-- 
2.7.4

