From 721eadf11bd78bd2738d34144122971f196b79ab Mon Sep 17 00:00:00 2001
From: Vladimir Barinov <vladimir.barinov@cogentembedded.com>
Date: Thu, 21 May 2020 11:27:42 +0300
Subject: [PATCH 08/76] i2c: mix: pca954x: reset mux in case of error during
 bus (de)select

Signed-off-by: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
---
 drivers/i2c/muxes/i2c-mux-pca954x.c | 34 ++++++++++++++++++++++++++--------
 1 file changed, 26 insertions(+), 8 deletions(-)

diff --git a/drivers/i2c/muxes/i2c-mux-pca954x.c b/drivers/i2c/muxes/i2c-mux-pca954x.c
index 4ad6657..d7df332 100644
--- a/drivers/i2c/muxes/i2c-mux-pca954x.c
+++ b/drivers/i2c/muxes/i2c-mux-pca954x.c
@@ -79,6 +79,7 @@ struct chip_desc {
 struct pca954x {
 	const struct chip_desc *chip;
 
+	struct gpio_desc *gpio;	/* reset gpio */
 	u8 last_chan;		/* last register value */
 	/* MUX_IDLE_AS_IS, MUX_IDLE_DISCONNECT or >= 0 for channel */
 	s32 idle_state;
@@ -242,6 +243,15 @@ static int pca954x_select_chan(struct i2c_mux_core *muxc, u32 chan)
 	/* Only select the channel if its different from the last channel */
 	if (data->last_chan != regval) {
 		ret = pca954x_reg_write(muxc->parent, client, regval);
+		if (ret < 0) {
+			dev_err(&data->client->dev, "error selecting channed %d (was 0x%02x), reseting mux\n",
+				chan, data->last_chan);
+			gpiod_set_value(data->gpio, 1);
+			usleep_range(1, 10);
+			gpiod_set_value(data->gpio, 0);
+			/* retry */
+			ret = pca954x_reg_write(muxc->parent, client, regval);
+		}
 		data->last_chan = ret < 0 ? 0 : regval;
 	}
 
@@ -253,6 +263,7 @@ static int pca954x_deselect_mux(struct i2c_mux_core *muxc, u32 chan)
 	struct pca954x *data = i2c_mux_priv(muxc);
 	struct i2c_client *client = data->client;
 	s32 idle_state;
+	int ret;
 
 	idle_state = READ_ONCE(data->idle_state);
 	if (idle_state >= 0)
@@ -262,8 +273,16 @@ static int pca954x_deselect_mux(struct i2c_mux_core *muxc, u32 chan)
 	if (idle_state == MUX_IDLE_DISCONNECT) {
 		/* Deselect active channel */
 		data->last_chan = 0;
-		return pca954x_reg_write(muxc->parent, client,
-					 data->last_chan);
+		ret = pca954x_reg_write(muxc->parent, client, data->last_chan);
+		if (ret < 0) {
+			dev_err(&data->client->dev, "error deselecting channed %d, reseting mux\n", chan);
+			gpiod_set_value(data->gpio, 1);
+			usleep_range(1, 10);
+			gpiod_set_value(data->gpio, 0);
+			/* retry */
+			ret = pca954x_reg_write(muxc->parent, client, data->last_chan);
+		}
+		return ret;
 	}
 
 	/* otherwise leave as-is */
@@ -416,7 +435,6 @@ static int pca954x_probe(struct i2c_client *client,
 {
 	struct i2c_adapter *adap = client->adapter;
 	struct device *dev = &client->dev;
-	struct gpio_desc *gpio;
 	struct i2c_mux_core *muxc;
 	struct pca954x *data;
 	int num;
@@ -435,12 +453,12 @@ static int pca954x_probe(struct i2c_client *client,
 	data->client = client;
 
 	/* Reset the mux if a reset GPIO is specified. */
-	gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
-	if (IS_ERR(gpio))
-		return PTR_ERR(gpio);
-	if (gpio) {
+	data->gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(data->gpio))
+		return PTR_ERR(data->gpio);
+	if (data->gpio) {
 		udelay(1);
-		gpiod_set_value_cansleep(gpio, 0);
+		gpiod_set_value_cansleep(data->gpio, 0);
 		/* Give the chip some time to recover. */
 		udelay(1);
 	}
-- 
2.7.4

